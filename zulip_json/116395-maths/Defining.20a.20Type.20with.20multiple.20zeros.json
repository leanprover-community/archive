[
    {
        "content": "<p>I am working on defining a type for physical quantities in Lean. I have already finished defining a type for dimensional analysis, the code can be found <a href=\"https://github.com/ATOMSLab/LeanChemicalTheories/blob/main/src/dimensional_analysis/basic.lean\">here</a>. We have a manuscript almost done on the dimensional analysis stuff. For physical quantities the idea was to define a physical quantity type as the product of a number and the dimension, ie:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">science_unit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Right now just using real numbers, but it will eventually be generalized to a vector space. For dimensional analysis, there is no zero because there is no identity element for addition. However, for physical quantities there is an identity element for addition, however there are multiple. That's because if we had 1 Length and added 0, 0 would have to have dimensions of Length too. That's because the addition of two physical quantities is only allowed if they have the same dimension.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">science_unit</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">science_unit</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">science_unit</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a.fst</span> <span class=\"bp\">+</span> <span class=\"n\">b.fst</span><span class=\"o\">,</span> <span class=\"n\">a.snd</span> <span class=\"bp\">+</span> <span class=\"n\">b.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I wanted to get feedback on how we would go about defining zero, or even if it was possible to define a zero if a Type has multiple forms of zero.</p>",
        "id": 364891138,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686324176
    },
    {
        "content": "<p>You mean <code>a.snd</code>, not <code>a.snd + b.snd</code></p>",
        "id": 364900586,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326163
    },
    {
        "content": "<p>Do you want <code>add</code> to take a proof of <code>a.snd = b.snd</code> as an argument, or define it for all <code>science_unit</code>s and ask for <code>a.snd = b.snd</code> in proofs of properties?</p>",
        "id": 364901134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326278
    },
    {
        "content": "<p>In the first case you're sure that one can't get <code>0 m + 1 s</code> by accident.</p>",
        "id": 364901289,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326303
    },
    {
        "content": "<p>Another approach is to allow such sums and deal with <code>dimension α →₀ ℝ</code> instead.</p>",
        "id": 364901601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326376
    },
    {
        "content": "<p>(or, if you have a <code>group</code> structure on <code>dimension</code>s, then <code>monoid_algebra ℝ (dimension α)</code>)</p>",
        "id": 364901846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326424
    },
    {
        "content": "<p>In this case you allow expressions like <code>0 m + 1 s</code></p>",
        "id": 364902015,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326460
    },
    {
        "content": "<p>Unfortunately, the product type doesn't have a vector space (or even an additive group) structure.</p>",
        "id": 364902186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326498
    },
    {
        "content": "<p>(and probably you want to talk about <code>(10 m + 20 m) / (30 s) ^ 2</code>)</p>",
        "id": 364902383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326533
    },
    {
        "content": "<p>Are there projects that formalize computations with dimensions in Coq, Isabelle, etc?</p>",
        "id": 364902548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326571
    },
    {
        "content": "<p>If yes, what choices did they make?</p>",
        "id": 364902623,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326587
    },
    {
        "content": "<p>BTW, do you want to allow <code>1 cm + 3 m</code> or <code>5 in + 3 cm</code>?</p>",
        "id": 364902737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326609
    },
    {
        "content": "<p>Or <code>(1 cm).to_dim in</code>?</p>",
        "id": 364902933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686326644
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364900586\">said</a>:</p>\n<blockquote>\n<p>You mean <code>a.snd</code>, not <code>a.snd + b.snd</code></p>\n</blockquote>\n<p>We defined addition already in dimensional analysis using classical choice such that it only allows to dimensions to be added if they are like dimensions. So you can have <code>1 m + 1 s</code> but it won't simplify. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.epsilon</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 364908405,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686327819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364901846\">said</a>:</p>\n<blockquote>\n<p>(or, if you have a <code>group</code> structure on <code>dimension</code>s, then <code>monoid_algebra ℝ (dimension α)</code>)</p>\n</blockquote>\n<p>We have already defined the multiplicative comm_group for dimensions, but no groups for addition because dimensions don't have a zero</p>",
        "id": 364908615,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686327865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364902548\">said</a>:</p>\n<blockquote>\n<p>Are there projects that formalize computations with dimensions in Coq, Isabelle, etc?</p>\n</blockquote>\n<p>not from what I have seen, but I could have missed it</p>",
        "id": 364908690,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686327890
    },
    {
        "content": "<p>If you want to allow expressions like <code>1 m + 1 s</code>, then I recommend using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>.</p>",
        "id": 364910018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686328190
    },
    {
        "content": "<p>It explicitly allows such expressions without asking for addition on <code>dimension</code>s.</p>",
        "id": 364910189,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686328221
    },
    {
        "content": "<p>Then you can define division that makes sense only if the denominator is a non-zero <code>single</code></p>",
        "id": 364910508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686328302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364902737\">said</a>:</p>\n<blockquote>\n<p>BTW, do you want to allow <code>1 cm + 3 m</code> or <code>5 in + 3 cm</code>?</p>\n</blockquote>\n<p>We want to allow this, but the addition won't simplify unless you convert the units. My idea of defining these units was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">meter</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_length</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">science_unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dimension.length</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">centimeter</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_length</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">meter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">length_meter</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_length</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">meter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Although this is the current idea, I'm not happy with it because it requires us to agree that the base SI units are the reference points. Could possibly get around this with the class strucutre</p>",
        "id": 364910731,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686328350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364910018\">said</a>:</p>\n<blockquote>\n<p>If you want to allow expressions like <code>1 m + 1 s</code>, then I recommend using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>.</p>\n</blockquote>\n<p>Let me look at the monoid_algebra. I'm not familiar with it. What is the flaw with the current way if the addition for dimensions is already defined since the addition of the dimensions checks to make sure the units are compatible to add?</p>",
        "id": 364910995,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686328416
    },
    {
        "content": "<p>Max, you definitely want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>.</p>",
        "id": 364911001,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686328418
    },
    {
        "content": "<p>Ok, let me play around with some stuff and see how it works. Thank you!</p>",
        "id": 364911370,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686328509
    },
    {
        "content": "<p>Do you have any recommendations for resources to learn about monoid algebra and how I would apply it here?</p>",
        "id": 364911543,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686328551
    },
    {
        "content": "<p>You would use <code>monoid_algebra ℝ (dimension α)</code>. This is a synonym for <code>dimension α →₀ ℝ</code>, the collection of finitely supported functions on <code>dimension α</code>. You should think of these as finite formal sums of scalar multiples of dimensions. (e.g., like <code>2 d + π d'</code>, where <code>d d' : dimension α</code>). This structure forms an <code>ℝ</code>-algebra. The multiplication is defined in the way you want (as a convolution using the <code>comm_group</code> structure you have on dimensions).</p>",
        "id": 364913356,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686328976
    },
    {
        "content": "<p>So, suppose <code>d₁ d₂ d₃ d₄ : dimension α</code>, <code>r₁ r₂ r₃ r₃ : ℝ</code> and <code>r₁ d₁ + r₂ d₂</code> and <code>r₃ d₃ + r₄ d₄ : monoid_algebra ℝ (dimension α)</code> (these last two are not valid syntax), then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">d₁</span> <span class=\"bp\">+</span> <span class=\"n\">r₂</span> <span class=\"n\">d₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r₃</span> <span class=\"n\">d₃</span> <span class=\"bp\">+</span> <span class=\"n\">r₄</span> <span class=\"n\">d₄</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₃</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"bp\">*</span> <span class=\"n\">r₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d₁</span> <span class=\"bp\">*</span> <span class=\"n\">d₄</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r₂</span> <span class=\"bp\">*</span> <span class=\"n\">r₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d₂</span> <span class=\"bp\">*</span> <span class=\"n\">d₃</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r₂</span> <span class=\"bp\">*</span> <span class=\"n\">r₄</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d₂</span> <span class=\"bp\">*</span> <span class=\"n\">d₄</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And, supposing for the sake of example that <code>d₁ * d₃ = d₂ * d₄</code> and <code>d₁ * d₄ = d₂ * d₃</code>, then the above is equal to: <code>(r₁ * r₃ + r₂ * r₄) (d₁ * d₃) + (r₁ * r₄ + r₂ * r₃) (d₁ * d₄)</code></p>",
        "id": 364916031,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686329584
    },
    {
        "content": "<p>The classic example of a <code>monoid_algebra</code> is the group ring of a group <code>G</code> (which is <code>monoid_algebra ℤ G</code>)</p>",
        "id": 364916441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686329676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364910995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364910018\">said</a>:</p>\n<blockquote>\n<p>If you want to allow expressions like <code>1 m + 1 s</code>, then I recommend using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>.</p>\n</blockquote>\n<p>Let me look at the monoid_algebra. I'm not familiar with it.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"474115\">@Max Bobbin</span>, can you confirm whether you actually do want to allow <code>1 m + 1 s</code>?</p>",
        "id": 364918902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686330304
    },
    {
        "content": "<p>(If not then <code>(d : dimension α)</code> should be a parameter to <code>science_unit</code>, and then <code>science_unit</code> is just a fancy type synonym for <code>ℝ</code> and it will be hard to combine units)</p>",
        "id": 364922513,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686331229
    },
    {
        "content": "<p>That weird auxiliary sigma type which we use in grading theory has lots of zeros</p>",
        "id": 364927172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686332385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364918902\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364910995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364910018\">said</a>:</p>\n<blockquote>\n<p>If you want to allow expressions like <code>1 m + 1 s</code>, then I recommend using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra\">docs#monoid_algebra</a>.</p>\n</blockquote>\n<p>Let me look at the monoid_algebra. I'm not familiar with it.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span>, can you confirm whether you actually do want to allow <code>1 m + 1 s</code>?</p>\n</blockquote>\n<p>We don't want <code>1 m + 1 s</code> to be a valid form, but I was thinking we would have to allow it to at least be possible to write so we can write complex equations like <code>1 m / 1 s + 1 m/s</code> The second equation is a valid equation to reduce to <code> 2 m/s</code> where as <code>1 m + 1 s</code> can't be reduced. Not sure if that answers the question though, I may be misunderstanding what you are asking.</p>",
        "id": 364938127,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686335238
    },
    {
        "content": "<p>Another way to do it is to use Lean 4 <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HMul#doc\">docs4#HMul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HAdd#doc\">docs4#HAdd</a></p>",
        "id": 364948187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686337868
    },
    {
        "content": "<p>You can say that <code>ScienceUnit (d : Dimension α) := ℝ</code>, then define <code>AddCommGroup</code> instance for each <code>ScienceUnit d</code> and <code>HMul</code> instances for <code>ScienceUnit d1 -&gt; ScienceUnit d2 -&gt; ScienceUnit (d1 * d2)</code>.</p>",
        "id": 364948677,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686338016
    },
    {
        "content": "<p>This way you will be able to write <code>a + b</code> only if <code>a</code> and <code>b</code> have definitionally equal dimensions.</p>",
        "id": 364948812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686338053
    },
    {
        "content": "<p>(so, you need computable dimensions)</p>",
        "id": 364948842,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686338064
    },
    {
        "content": "<p>I think requiring defeq dimensions would be miserable. However, using <code>monoid_algebra</code> with an <code>is_valid_form</code> predicate saying that an element is equal to some <code>finsupp.single</code> would make sense.</p>",
        "id": 364949031,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686338133
    },
    {
        "content": "<p>That way you avoid computability requirements.</p>",
        "id": 364949101,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686338157
    },
    {
        "content": "<p>As you can see, you can get at least <code>n + 1</code> opinions from <code>n</code> experienced users. ;-)</p>",
        "id": 364949761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686338356
    },
    {
        "content": "<p><code>1 m / 1 s + 1 m/s</code> is exactly the kind of thing you could do with <code>monoid_algebra</code> (or more precisely, <code>1 m * 1 s⁻¹ + 1 (m * s⁻¹)</code>) and have it make sense easily. Admittedly, Yury's heterogeneous suggestion should also work, but I would be concerned you would run into unification headaches (maybe that's an unfounded concern).</p>",
        "id": 364950965,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686338716
    },
    {
        "content": "<p>I see, I'll work on implementing this. The other thing I've been mulling over is scale. I'm curious to see what others think, but my guess is using <code>monoid_algebra</code> we could define <code>meter := monoid_algebra 1 dimension.length</code> and then <code>centimeter := meter/100</code>. I worry that this definition is limiting, but I could be wrong.</p>",
        "id": 364951590,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686338911
    },
    {
        "content": "<p>You can define <code>centimeter := 100⁻¹ • meter</code></p>",
        "id": 364957480,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686340658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364957480\">said</a>:</p>\n<blockquote>\n<p>You can define <code>centimeter := 100⁻¹ • meter</code></p>\n</blockquote>\n<p>What I meant was, I think there should be a better way then hoping that everyone agrees that the reference unit for length is 1 meter and everything is defined off the meter. The worry is someone comes along and defines the foot and they define it as 1, then you have 1 meter = 1 foot. Wanted to know if people had thoughts on this if its avoidable</p>",
        "id": 365178595,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686422864
    },
    {
        "content": "<p>You can either (a) use nonnegative reals and label your axes with the unit being used (meter, foot,...), (b) use no labelling and make your axes homogeneous spaces (so there is no \"1\" but you can still add, and multiply by a natural) or (c) use the nonnegative reals, not label your axes, and then have the ambiguity.</p>",
        "id": 365179030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686423048
    },
    {
        "content": "<p>Just call the type <code>structure Length := (meters : Real)</code>, now if someone does the same definition for feet there is a clash</p>",
        "id": 365179142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686423107
    },
    {
        "content": "<p>What do you mean by labeling your axes? The second option sounds like what I could be looking for, but I'm not familiar with homogeneous spaces</p>",
        "id": 365179244,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686423134
    },
    {
        "content": "<p>the idea being that when you define <code>def meter : Length := { meters := 1 }</code>, in order to get unit confusion you would need to also define <code>def foot : Length := { meters := 1 }</code> which is obviously suspicious</p>",
        "id": 365179636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686423293
    },
    {
        "content": "<p>This is basically the argument for newtypes in the setting of lean</p>",
        "id": 365179691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686423313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This doesn't help with <code>1 m / 1 s</code></p>",
        "id": 365202027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686434920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/365179244\">said</a>:</p>\n<blockquote>\n<p>What do you mean by labeling your axes? The second option sounds like what I could be looking for, but I'm not familiar with homogeneous spaces</p>\n</blockquote>\n<p>Labeling your axes: I mean what Mario is suggesting, with the constructor names saying which units you'er using. The homogeneous space idea: I'm suggesting not using the real numbers but a 1-dimensional vector space with no fixed choice of basis. This would be the \"correct\" abstract unitless way to do it. So you just have some 1-d space V and then a non-zero element of V represents a measurement, and given two nonzero elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">v,w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> of V there's a unique real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>v</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">rv=w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>, but it doesn't make sense to say \"v=1\" or \"v=37\" or anything, until you choose the unit, i.e. pick a basis. The moment you pick a basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> (e.g. 1 metre or 1 foot) then every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">v\\in V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">re</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">re</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> a real number and now you can call <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> \"r metres\" or \"r feet\" or whatever, although of course the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> changes depending on which basis you pick.</p>",
        "id": 365203118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686435562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/364891138\">said</a>:</p>\n<blockquote>\n<p>I have already finished defining a type for dimensional analysis, the code can be found <a href=\"https://github.com/ATOMSLab/LeanChemicalTheories/blob/main/src/dimensional_analysis/basic.lean\">here</a>. </p>\n</blockquote>\n<p>This code looks a bit weird to me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_time</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">dec</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">time</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">nodup</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What was your intention with <code>[time].nodup</code>? <code>[x].nodup</code> is always true, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nodup_singleton\">docs#list.nodup_singleton</a></p>",
        "id": 365204926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686436590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How do you suggest to implement a 1-dimensional vector space with no fixed choice of basis?</p>",
        "id": 365206601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686437649
    },
    {
        "content": "<p>What is the type definition?</p>",
        "id": 365206608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686437655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/365202027\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> This doesn't help with <code>1 m / 1 s</code></p>\n</blockquote>\n<p>What I described was just the 1D space for lengths. If you want to have all your units in a pot you need some <code>monoid_algebra</code> thing</p>",
        "id": 365207165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686438027
    },
    {
        "content": "<p>The \"all the units in a pot\" thing feels like the wrong design to me</p>",
        "id": 365207195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438053
    },
    {
        "content": "<p>but you can build that on top of <code>Length</code> as one of the coordinates</p>",
        "id": 365207198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686438057
    },
    {
        "content": "<p>If you're working in any real physical problem all your dimensions are known down to constructors anyway, so you have no defeq problems</p>",
        "id": 365207217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438077
    },
    {
        "content": "<p>you might have an n-dimensional problem?</p>",
        "id": 365207255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686438106
    },
    {
        "content": "<p>granted that's probably not too common in physics, unless you are talking about e.g. the lagrangian in n-dimensional phase space</p>",
        "id": 365207334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686438145
    },
    {
        "content": "<p>These are dimensions in the sense of metrology not space</p>",
        "id": 365207346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438162
    },
    {
        "content": "<p>Ah, I guess your lagrangian remark covers that</p>",
        "id": 365207379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438200
    },
    {
        "content": "<p>I think it's rare enough that dealing with a <code>dimension.cast</code> of some form very rarely is much less bad than having to constantly persuade lean you haven't mixed incompatible dimensions</p>",
        "id": 365207403,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686438231
    },
    {
        "content": "<p>I'd probably go for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_time</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_length</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_mass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mass</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">dimension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℚ</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">dimension.of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">pi.single</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_length</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_length.length</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_time</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_time.time</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">mass</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_mass.mass</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">measurement</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dim</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"n\">of</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 365210011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686440123
    },
    {
        "content": "<p>And then use it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">system1</span>\n<span class=\"bp\">|</span> <span class=\"n\">second</span> <span class=\"bp\">|</span> <span class=\"n\">meter</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_time</span> <span class=\"n\">system1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>  <span class=\"n\">time</span> <span class=\"o\">:=</span> <span class=\"n\">system1.second</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_length</span> <span class=\"n\">system1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">system1.meters</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- `measurement real (time system1)` is a real-valued duration</span>\n</code></pre></div>",
        "id": 365210166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686440224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> just ask <code>findim V = 1</code> (or whatever the nat version of dimension is called)</p>",
        "id": 365249839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686467409
    },
    {
        "content": "<p>I meant \"how to define types\", not \"how to define a typeclass\".</p>",
        "id": 365338648,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686496040
    },
    {
        "content": "<p>BTW, not a formalization but a good C++ library for units: <a href=\"https://www.boost.org/doc/libs/1_65_0/doc/html/boost_units.html\">https://www.boost.org/doc/libs/1_65_0/doc/html/boost_units.html</a></p>",
        "id": 365338798,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686496085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/365210011\">said</a>:</p>\n<blockquote>\n<p>I'd probably go for something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_time</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">time</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_length</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_mass</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mass</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">dimension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">multiplicative</span> <span class=\"n\">ℚ</span>\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">dimension.of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">pi.single</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_length</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_length.length</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">time</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_time</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_time.time</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">mass</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mass</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">dimension.of</span> <span class=\"bp\">$</span> <span class=\"n\">has_mass.mass</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">measurement</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dim</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"n\">of</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I remember being recommended something like this in the past, but I couldn't find information that explained what <code>multiplicative</code> was. Could someone explain how <code>multiplicative</code> works?</p>",
        "id": 365699389,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686611362
    },
    {
        "content": "<p>I guess my big confusion is how multiplicative and additive structures relate.</p>",
        "id": 365700050,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686611634
    },
    {
        "content": "<p>I notice that when I use this definition: <code>@[reducible] def dimension (α : Type u) := multiplicative (α → ℚ)\n</code> The abelian group comes automatically, however, addition doesn't come (as to be expected). If I do <code>.to_additive</code> does this convert multiplication operations to addition? My guess was the <code>.to_additive</code> makes the dimensions act like we were manipulating a vector of exponent values, which are done under the operations of addition. If so, how does this work with the need to define the addition of dimensions to be idempotent? My other concern with this way is I'm not sure if the exponents are being added correctly. While I can say <code>area := length^2</code> I want the underlying code to have an area of 2 when indexed by the Length base dimension class. This is important when we try to implement the Buckingham pi theorem.</p>",
        "id": 365700660,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686611868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/365203118\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"474115\">Max Bobbin</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20a.20Type.20with.20multiple.20zeros/near/365179244\">said</a>:</p>\n<blockquote>\n<p>What do you mean by labeling your axes? The second option sounds like what I could be looking for, but I'm not familiar with homogeneous spaces</p>\n</blockquote>\n<p>Labeling your axes: I mean what Mario is suggesting, with the constructor names saying which units you'er using. The homogeneous space idea: I'm suggesting not using the real numbers but a 1-dimensional vector space with no fixed choice of basis. This would be the \"correct\" abstract unitless way to do it. So you just have some 1-d space V and then a non-zero element of V represents a measurement, and given two nonzero elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">v,w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> of V there's a unique real number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>v</mi><mo>=</mo><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">rv=w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>, but it doesn't make sense to say \"v=1\" or \"v=37\" or anything, until you choose the unit, i.e. pick a basis. The moment you pick a basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> (e.g. 1 metre or 1 foot) then every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">v\\in V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">re</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">re</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> a real number and now you can call <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> \"r metres\" or \"r feet\" or whatever, although of course the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> changes depending on which basis you pick.</p>\n</blockquote>\n<p>Unless I'm misunderstanding, the only problem I have with implementing this is I can't make dimensions into a module because they don't form an add_comm_monoid. The exponents of dimensions form one, I believe.</p>",
        "id": 365700962,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686611971
    },
    {
        "content": "<p>or wait, the vector space isn't over the dimensions, is it?</p>",
        "id": 365701594,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1686612301
    },
    {
        "content": "<p><code>multiplicative G</code> is a type synonym for <code>G</code>; for each additive structure on <code>G</code> (<code>has_add</code>, <code>add_comm_monoid</code> etc), it defines the corresponding multiplicative structure which is mathematically the same structure with different notation.</p>",
        "id": 365701853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686612456
    },
    {
        "content": "<blockquote>\n<p>The abelian group comes automatically, however, addition doesn't come (as to be expected).</p>\n</blockquote>\n<p>I'd go as far as saying that you don't want the additive structure in the first place. Leave that to <code>monoid_algebra</code> to generate if you really want it.</p>",
        "id": 365703100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686613180
    },
    {
        "content": "<blockquote>\n<p>If so, how does this work with the need to define the addition of dimensions to be idempotent?</p>\n</blockquote>\n<p>If you replace this with \"addition of (mixed) measurements\", then <code>monoid_algebra</code> handles this for you; <code>1 * of R meters + 2 * of R meters = 3 * of R meters</code></p>",
        "id": 365703694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686613565
    },
    {
        "content": "<p>If you restrict yourself to well-typed measurements then the question does't even make sense</p>",
        "id": 365703728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686613600
    },
    {
        "content": "<blockquote>\n<p>My other concern with this way is I'm not sure if the exponents are being added correctly.</p>\n</blockquote>\n<p>Write a theorem to prove that they are!</p>",
        "id": 365703745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686613621
    }
]