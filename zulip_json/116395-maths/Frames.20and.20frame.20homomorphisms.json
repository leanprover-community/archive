[
    {
        "content": "<p>A frame is, usually, defined as an order with finite meets and infinite joins, where finite meets moreover distribute over said infinite joins.</p>\n<p>In Mathlib4, however, frames are not defined yet (afaik) but frame homomorphisms are... they are defined over complete lattices though.</p>\n<p>Now... it is true that any frame can be considered as a complete lattice (having both infinite meets and infinite joins), because an infinite meet can be defined in terms of the infinite join. So it makes sense to simply consider a frame to be a complete lattice with finite meets distributing over infinite joins.</p>\n<p>But... the definition of frame homomorphism only states preservation of finite meet, infinite join, and the top element. It does not guarantee preservation of the distributivity law.</p>\n<p>I think therefore that it would be conceptually better at least to introduce frames as well and define frame homomorphisms on those.</p>\n<p>Is there a reason why that was not (yet) done?</p>",
        "id": 366176083,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686747780
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Order.Frame#doc\">docs4#Order.Frame</a> not a frame?</p>",
        "id": 366178702,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1686748341
    },
    {
        "content": "<p>Yes, Oliver is right. We have the definition of frames in mathlib. I don't see what you mean by \"preservation of the distributivity law\". The distributivity law is not data, so it cannot be preserved.</p>",
        "id": 366179594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686748543
    },
    {
        "content": "<p>Similar to how a group homomorphism is not required to \"preserve associativity\".</p>",
        "id": 366179970,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1686748621
    },
    {
        "content": "<p>I think mainly the documentation is suboptimal: rather than<br>\n\" A frame is a complete lattice such that ...\"<br>\nit should be more like<br>\n\"A frame is a poset with arbitrary joins and finite meets such that .... Note that, since it is a theorem that every frame also has arbitrary meets, for technical reasons <code>Frame</code> also extends <code>CompleteLattice</code>.\"</p>",
        "id": 366196488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686751708
    },
    {
        "content": "<p>That's not really in the mathlib spirit, but sure.</p>",
        "id": 366201059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686752509
    },
    {
        "content": "<p>Thanks, I must have overlooked that! Sorry.</p>\n<p>But still, why define a frame homomorphism between complete lattices, rather than between frames?</p>\n<p>The distributivity is perhaps not data, but it is structure - so a structure preserving map should preserve it. (I'm not formally trained as a mathematician though, so I may have misunderstood something.)</p>",
        "id": 366301499,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686775990
    },
    {
        "content": "<p>Can you try stating what preserving distributivity would mean? I think you will see what I was getting at.</p>",
        "id": 366301888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776156
    },
    {
        "content": "<p>So imo it is not similar to a group homomorphism not preserving associativity. It would be more like defining a group homomorphism on semigroups, simply because a group is a semigroup. That feels wrong.</p>",
        "id": 366302059,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776216
    },
    {
        "content": "<p>Since a complete lattice does not have distributivity, a frame homomorphism doesnt make sense between complete lattices.</p>",
        "id": 366302162,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776269
    },
    {
        "content": "<p>Well... speaking of that, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom\">docs#monoid_hom</a> is the structure representing group homomorphisms, and it's defined on monoids.</p>",
        "id": 366302237,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776285
    },
    {
        "content": "<p>Why?</p>",
        "id": 366302349,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776317
    },
    {
        "content": "<p>It's not defined on semigroups because we need the existence of <code>1</code> to state <code>f 1 = 1</code>.</p>",
        "id": 366302362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776323
    },
    {
        "content": "<p>This is because a group homomorphism is just a monoid homomorphism between groups. If it were its own thing, we would have to duplicate many, <em>many</em> definitions and lemmas between <code>monoid_hom</code> and <code>group_hom</code> for no clear benefit.</p>",
        "id": 366302569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776393
    },
    {
        "content": "<p>This is also why we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> but not <code>vector_space</code>. Vector spaces, modules and semimodules are all the same thing, the only difference being the background assumption that the scalars form a field, ring, semiring.</p>",
        "id": 366302858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776494
    },
    {
        "content": "<p>Ah, so it is really about duplication of theorems.</p>",
        "id": 366302911,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776519
    },
    {
        "content": "<p>That does not happen automatically once you've proven that every frame is a complete lattice?</p>",
        "id": 366303069,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776566
    },
    {
        "content": "<p>\"automatically\" being the difficulty, I suppose</p>",
        "id": 366303130,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776596
    },
    {
        "content": "<p>(newbe in theorem proving)</p>",
        "id": 366303183,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776621
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 366303343,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1686776677
    },
    {
        "content": "<p>If you make</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then <code>monoid_hom G H</code> and <code>group_hom G H</code> are simply <em>not the same type</em>. Lean can't just replace one by the other.</p>",
        "id": 366303354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776683
    },
    {
        "content": "<p>You would have to prove by hand that every property you care about transfers across the obvious isomorphism <code>monoid_hom G H ≃ group_hom G H</code>, and then perform that transfer on every single theorem.</p>",
        "id": 366303490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776739
    },
    {
        "content": "<p>The analogy here is somewhat flawed in that \"frame homomorphism of complete lattices\" is not a concept of the same status as say a homomorphism of monoids.</p>",
        "id": 366303516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686776752
    },
    {
        "content": "<p>Yeah. I must confess that i don't know of uses of frame homs on non-frame complete lattices, but having the def in the generality of complete lattices doesn't hurt.</p>",
        "id": 366303621,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776782
    },
    {
        "content": "<p>Well, it seems to cause some confusion at least...</p>",
        "id": 366303644,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686776796
    },
    {
        "content": "<p>And the confusion was cleared up with Pieter learning one of the fundamental designs of mathlib <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 366303750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1686776838
    },
    {
        "content": "<p>True. The confusion is cleared up <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> thanks a lot! (Even though a twinge of disappointment remains <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span>. I guess that's just why research in this field is still usefull. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>)</p>",
        "id": 367230571,
        "sender_full_name": "Pieter Cuijpers",
        "timestamp": 1687026317
    }
]