[
    {
        "content": "<p>Here I have a definition of a category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Definition of a category</span>\n<span class=\"kd\">structure</span> <span class=\"n\">CatObj</span> <span class=\"n\">where</span>\n  <span class=\"n\">Obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">composition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n  <span class=\"n\">identity₁</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),(</span><span class=\"n\">composition</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">identity</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">identity₂</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),(</span><span class=\"n\">composition</span> <span class=\"n\">X</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">identity</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n  <span class=\"n\">Ass</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Y</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">Z</span><span class=\"o\">:</span><span class=\"n\">Obj</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">W</span> <span class=\"n\">X</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span><span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>I'm trying to design a tactic that applies associativity to show that \"the brackets don't matter\" in any two expressions involving composition, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Expression₁</span> <span class=\"bp\">=</span> <span class=\"n\">Expression₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">associativity</span>\n</code></pre></div>\n<p>I figured the way it would work is to show that both are equal to the right-associated expression Expression₃. </p>\n<p>I'm still pretty new to Lean, especially tactics. I was wondering how something like this should be done.</p>\n<p>--Dean</p>",
        "id": 339748344,
        "sender_full_name": "Dean Young",
        "timestamp": 1678053212
    },
    {
        "content": "<p>Ok, so I want to always rewrite</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">composition</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>on both sides of the expression, until I can't anymore (so using repeat {}).</p>\n<p>Then I want to apply reflexivity.</p>",
        "id": 339749527,
        "sender_full_name": "Dean Young",
        "timestamp": 1678054216
    },
    {
        "content": "<p>I don't really understand how to use rewrite though. Is it based in regex?</p>",
        "id": 339749569,
        "sender_full_name": "Dean Young",
        "timestamp": 1678054262
    },
    {
        "content": "<p>I guess I'm wondering about rewrite then. Exactly how powerful is rewrite? For instance, will rewrite be able to find that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∘</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is a subexpression of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∘</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>so as to apply associativity?</p>",
        "id": 339749887,
        "sender_full_name": "Dean Young",
        "timestamp": 1678054512
    },
    {
        "content": "<p>Ok so something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rewrite</span> <span class=\"n\">C.Ass</span><span class=\"o\">},</span>\n<span class=\"n\">reflexivity</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339750163,
        "sender_full_name": "Dean Young",
        "timestamp": 1678054717
    },
    {
        "content": "<p>that felt way too easy... and I'm very curious about exactly which subexpressions rewrite can find. Seems like it brute force searches them all? Or just the \"atomic\" ones?</p>",
        "id": 339751078,
        "sender_full_name": "Dean Young",
        "timestamp": 1678055438
    },
    {
        "content": "<p>it will look for a match of the expression on the left hand side inside of your rewrite term in the goal by simply traversing the expression tree that underlies the goal (it can also do this with quantified variables like in your case) and replace that expression with the right hand side of your rewrite term.</p>",
        "id": 339752430,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678056557
    },
    {
        "content": "<p>ok that's great then. seems like my associativity tactic will work perfectly!</p>",
        "id": 339752517,
        "sender_full_name": "Dean Young",
        "timestamp": 1678056607
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 339753733,
        "sender_full_name": "Dean Young",
        "timestamp": 1678057619
    }
]