[
    {
        "content": "<p>Now that bornologies have landed in mathlib, I'd like to define the topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span>-convergence on spaces of linear maps between two TVSs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span> is a set of Von Neumann bounded sets of E, but I'd like to discuss a few design decisions before actually starting to work on that :</p>\n<ul>\n<li>do we want to have type aliases for each possible <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span> ? for each <em>bornology</em>  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span> (since taking the generated bornology doesn't change the topology) ? Or is the von Neumann bornology canonical enough that we can put it as the default topology on <code>E -&gt;L[k] F</code> ?</li>\n<li>If we put a topology on <code>E -&gt;L[k] F</code>, we'll have to make sure that the instance coming from the <code>normed_space</code> structure is defeq to the more general one. Would it work to separate the PRs by first localizing the new instance, and then making it global when everything is fixed ?</li>\n<li>Is there any point to first define the topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span>-convergence on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>−</mo><mo>&gt;</mo><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">E -&gt; F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> like Bourbaki does (which might mean a new type synonym again...). For example we could redefine compact-open topology from it ?</li>\n<li>What do you think would be easier : giving a neighborhood basis (this is what mathlib does for the compact-open topology), or define it as the initial topology associated with restrictions to set of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6914em;\"></span><span class=\"mord mathfrak\">S</span></span></span></span>, whith the topology of uniform convergence on the codomain (this is what Bourbaki does)</li>\n<li>If we don't redefine the compact open topology, nor the weak dual, or anything which could be a special case of this general setup, do we want a <code>topology_of_convergence S</code> Prop-valued typeclass asserting that the topology on a type is (provably) equal to the topology of <code>S</code>-convergence ?</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> You might have started to work on / think about this, so I'd like to hear your thoughts in particular. I've also seen <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> might need some of this in the sphere-version project, am I right ?</p>\n<p>Anyway, thanks in advance !</p>",
        "id": 276359015,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648052208
    },
    {
        "content": "<p>To be honest, I have not done much here, and have not started on any of the above. There is <a href=\"https://github.com/leanprover-community/mathlib/pull/12078\">#12078</a> (which is open and ready for anyone reading this; I think Moritz already had a look) that puts a bornology instance on metric spaces. I will probably not contribute much to bornology unless anyone has something specific they want me to do because I have plenty of other things to work on.</p>",
        "id": 276361098,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648052887
    },
    {
        "content": "<p>I think we should define bornological spaces first, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> wanted to define bornivorous sets, which is needed for that. I thought a bit about the question whether to use type synonyms for all kinds operator topologies and I am tending towards no. Maybe <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has some ideas about that (seems quite related the issues with polish spaces).</p>",
        "id": 276361290,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648052956
    },
    {
        "content": "<p>@4 I think the initial topology might be less code (but more weird code IMO). You can see the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_bilin\">docs#weak_bilin</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm_family.module_filter_basis\">docs#seminorm_family.module_filter_basis</a> the weirdness comes when you try to calculate the filter basis - for <code>weak_bilin</code> it is in <a href=\"https://github.com/leanprover-community/mathlib/pull/12623\">#12623</a> (as you can see nobody wants to review that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> ). In the end it should not matter that much as you have the same results. I found writing the module filter basis way easier as all steps are straightforward.</p>",
        "id": 276372644,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648057138
    },
    {
        "content": "<p>I'll try to get bornivores out this weekend!</p>",
        "id": 276373120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648057353
    },
    {
        "content": "<p>Could you expand on why we need bornological spaces for this ? I see why we need bornologies, but not bornological spaces. Sorry, I'm discovering the maths at the same time, so I don't see the full picture yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276404905,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648071883
    },
    {
        "content": "<p>But anyway I can wait / help if we need to setup more things first</p>",
        "id": 276404970,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648071923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/116395-maths/topic/Strong.20topology.20on.20linear.20maps/near/276372644\">said</a>:</p>\n<blockquote>\n<p>@4 I think the initial topology might be less code (but more weird code IMO). You can see the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_bilin\">docs#weak_bilin</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm_family.module_filter_basis\">docs#seminorm_family.module_filter_basis</a> the weirdness comes when you try to calculate the filter basis - for <code>weak_bilin</code> it is in <a href=\"https://github.com/leanprover-community/mathlib/pull/12623\">#12623</a> (as you can see nobody wants to review that <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> ). In the end it should not matter that much as you have the same results. I found writing the module filter basis way easier as all steps are straightforward.</p>\n</blockquote>\n<p>Yeah I know, sometimes filter bases are just painful to use. I've been keeping <a href=\"https://github.com/leanprover-community/mathlib/pull/12118\">#12118</a> \"WIP\" for waaaay too long because I need to refactor some things about filter bases first</p>",
        "id": 276405499,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648072207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Strong.20topology.20on.20linear.20maps/near/276404905\">said</a>:</p>\n<blockquote>\n<p>Could you expand on why we need bornological spaces for this ? I see why we need bornologies, but not bornological spaces. Sorry, I'm discovering the maths at the same time, so I don't see the full picture yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I might have been wrong here, I was under the impression that bornological spaces were needed for some results because they connect the bornology with the TVS structure. I don't know that much about this extremely abstract functional analysis and especially not about bornologies,  I also use lean as a way to learn it.</p>",
        "id": 276407665,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648073364
    },
    {
        "content": "<p>I would use type synonyms for the three or so standard topologies on operator spaces. More precisely, I would put the standard one (that corresponds to the norm topology) on <code>E -&gt;L[k] F</code>, and use type synonyms for respectively the pointwise convergence topology, and the pointwise weak convergence topology.</p>",
        "id": 276443924,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1648110517
    },
    {
        "content": "<p>Does the topology on <code>E -&gt;L[k] F</code> have to be defeq to the topology induced by the operator norm? Right now the normed space structure on <code>E -&gt;L[k] F</code> is defined using <code>normed_space.of_core</code>. If have a topology (or probably a uniformity) on <code>E -&gt;L[k] F</code> in a more general case then we cannot use <code>of_core</code> but have to provide our proof that the topologies (uniformities) coincide.</p>",
        "id": 276459348,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648119840
    },
    {
        "content": "<p>Also it seems that the construction in Bourbaki GT.X is more general than what is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_convergence\">docs#compact_convergence</a> so we should get a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.compact_open_eq_compact_convergence\">docs#continuous_map.compact_open_eq_compact_convergence</a> for the relationship with the compact open topology.</p>",
        "id": 276459871,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648120131
    },
    {
        "content": "<p>The weak topologies should also be a special case, but I would not worry about that for now.</p>",
        "id": 276459995,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1648120203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/116395-maths/topic/Strong.20topology.20on.20linear.20maps/near/276459871\">said</a>:</p>\n<blockquote>\n<p>Also it seems that the construction in Bourbaki GT.X is more general than what is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_convergence\">docs#compact_convergence</a> so we should get a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.compact_open_eq_compact_convergence\">docs#continuous_map.compact_open_eq_compact_convergence</a> for the relationship with the compact open topology.</p>\n</blockquote>\n<p>Oh you made me realize that we can't <em>define</em> the compact-open topology this way, because compact-open topology doesn't involve any uniform structure <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 276470170,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648126204
    },
    {
        "content": "<p>Do we already have a type synonym for functions to an uniform space with the topology of uniform convergence (on the whole domain) ?</p>",
        "id": 276470272,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648126252
    },
    {
        "content": "<p>Like, all the functions, not only the continuous ones</p>",
        "id": 276470827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1648126502
    },
    {
        "content": "<p>I have some questions about strong topology on linear maps.</p>\n<ol>\n<li>Am I right that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.compactConvergenceTopology#doc\">docs#ContinuousMap.compactConvergenceTopology</a> is the same as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformOnFun.topologicalSpace#doc\">docs#UniformOnFun.topologicalSpace</a> for <code>𝔖 = {K | IsCompact K}</code>?</li>\n<li>\n<p>Am I right that <a href=\"https://en.wikipedia.org/wiki/Strong_operator_topology\">https://en.wikipedia.org/wiki/Strong_operator_topology</a> is equal to each of:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.strongTopology#doc\">docs#ContinuousLinearMap.strongTopology</a> with <code>𝔖 = Set.range singleton</code></li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.strongTopology#doc\">docs#ContinuousLinearMap.strongTopology</a> with <code>𝔖 = {s | Set.Finite s}</code></li>\n<li>the topology induced from functions?<br>\nShould we mention this in the module docstring?</li>\n</ul>\n</li>\n<li>\n<p>Do we ever need <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.strongTopology#doc\">docs#ContinuousLinearMap.strongTopology</a> for <code>𝔖</code> not being the set of bounded sets for some bornology? If no, what do you think about de-generalizing the definition?</p>\n</li>\n<li>Do we need any extra assumptions to conclude that evaluation at a point is continuous as a function of two arguments? The domain is locally bounded (a.k.a. normable)? Or is it true with weaker assumptions?</li>\n<li>What assumptions do we need to conclude that <code>ContinuousLinearEquiv.symm</code> is continuous in the topology induced by projection to <code>ContinuousLinearMap</code>s? If we need extra assumptions, then what is the right topology when we don't have them: the one induced by projection to <code>ContinuousLinearMap</code>, or the one induced by embedding into the product (like we do with <code>Units</code>)? I would choose the latter for consistency but possibly there are reasons not to.</li>\n<li>What assumptions do we need to prove that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousLinearMap.flip#doc\">docs#ContinuousLinearMap.flip</a> is well-defined and is a continuous linear map?</li>\n</ol>",
        "id": 372729325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688598606
    },
    {
        "content": "<p>Oh that’s a lot of questions, give me some time 😅</p>",
        "id": 372814918,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688633332
    },
    {
        "content": "<ol>\n<li>Yes that is true, and I think we should get rid of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ContinuousMap.compactConvergenceTopology#doc\">docs#ContinuousMap.compactConvergenceTopology</a> for this reason. I should have opened an issue about it some time ago, sorry for not doing it. I'll do that this afternoon unless you beat me to it.</li>\n</ol>",
        "id": 372818312,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688634003
    },
    {
        "content": "<ol start=\"2\">\n<li>That is also true. Here I must admit that the naming scheme is badly chosen, for the simple reason that I only learned about this terminology after doing all of this work. Moreover, I had in mind the case where the target space is the base field, where this gives you the \"strong dual\", but if you are talking about operators then this becomes the \"strong operator topology\", which is a bit stupid in my opinion. So I agree we should at least add a comment about that, and maybe even better choose another name.</li>\n</ol>",
        "id": 372819827,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688634282
    },
    {
        "content": "<ol start=\"3\">\n<li>Well that is <em>almost</em> true, except that (as we talked about a few times already) we don't have the right notion of bornology. For clarity, I'll use \"bornology\" for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bornology#doc\">docs#Bornology</a> and \"ideal\" for \"Order.Ideal\" on the lattice of sets. That means that a bornology is precisely an ideal that contains the singletons.<br>\nThe result that is true, is that when you replace <code>𝔖</code> by the generated <strong>ideal</strong>, you do not change the topology of uniform convergence (this is in a rotten Mathlib3 PR of mine, but I had to work around bornology by hand so it didn't feel satisfying enouh). But if you take the generated <strong>bornology</strong> then you can clearly change the topology because having all singletons in your set forces the resulting topology to be T2 (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=UniformOnFun.t2Space_of_covering#doc\">docs#UniformOnFun.t2Space_of_covering</a>)</li>\n</ol>",
        "id": 372821447,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688634629
    },
    {
        "content": "<p>I maintain my opinion that we shouldn't require bornologies to contain singletons and that they should be exactly ideals of sets (this is what Bourbaki does), because it's super easy to add some typeclass saying \"singletons are bounded\" to make everything works transparently. But if people really disagree about that then we'll have to make more API for ideals of sets. Once either of these is done, I would be in favor of requiring <code>𝔖</code> to be an ideal and adding a few lemmas about what happens when <code>𝔖</code>  is generated by a convenient family of sets.</p>",
        "id": 372822815,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688634892
    },
    {
        "content": "<p>I don't know the answers to 4, 5 and 6, I will think about it this afternoon. But I really want to emphasize that a lot of things definitely are not true in general. I know that in general:</p>\n<ul>\n<li>continuous bilinear maps are <em>NOT</em> the same as our curried bilinear maps</li>\n<li>uncurried composition is <em>NOT</em> continuous. I think curried composition isn't either, but I have to think about it</li>\n</ul>",
        "id": 372825480,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688635438
    },
    {
        "content": "<p>I'm also pretty sure that flipping the arguments isn't well defined in general, but one case I care about where it is true is when one of the spaces is finite dimensional. This means that vector valued distributions have a well defined \"Fréchet derivative distribution\" as long as the domain is finite dimensional, which means that we don't have to choose a basis and talk about partial derivatives.</p>",
        "id": 372826322,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688635602
    },
    {
        "content": "<p>On and I should mention that a lot more of these things are (obviously) true when <code>𝔖</code> is the bornology of finite sets.</p>",
        "id": 372826849,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688635710
    },
    {
        "content": "<p>I think we shouldn't spend too much time searching for generalizations outside of the normed setting if we don't have a use case in mind (but maybe you do, in which case I'd be interested to hear about it!), because as I said a lot of things just aren't true in greater generality, and the useful cases are quite heavily studied. <br>\nSo the way I envision it is that these generalization happen when people need them, and maybe if we have multiple sets of hypotheses for a same result then we can try to find common ancesters</p>",
        "id": 372828263,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688635989
    },
    {
        "content": "<p>Oh and since we're talking about this, could I get a look on <a href=\"https://github.com/leanprover-community/mathlib/pull/19128\">!3#19128</a> ? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 372828613,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1688636058
    },
    {
        "content": "<p>Thanks a lot for the answers! I merged <a href=\"https://github.com/leanprover-community/mathlib/pull/19128\">!3#19128</a>. As for applications, the original reason was to find out if we can weaken assumptions in the vector bundle hom construction.</p>",
        "id": 372915970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688653190
    },
    {
        "content": "<p>It seems that the answer is \"no\" but we may want introduce a <code>Prop</code>-valued typeclass <code>[Seminormable _]</code> (or a <code>Type _</code>-valued typeclass <code>[NormableAddCommGroup _]</code> and use it instead of <code>[NormedAddCommGroup _]</code> here and there. Then constructions won't rely on a specific choice of norm, so we don't have to choose a norm, e.g., to speak about finite-dimensional matrices.</p>",
        "id": 372918702,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688653620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/116395-maths/topic/Strong.20topology.20on.20linear.20maps/near/372828613\">said</a>:</p>\n<blockquote>\n<p>Oh and since we're talking about this, could I get a look on <a href=\"https://github.com/leanprover-community/mathlib/pull/19128\">!3#19128</a> ? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>Now it's on the <a href=\"https://leanprover-community.github.io/mathlib-port-status/out-of-sync\">#outofsync</a> list.</p>",
        "id": 373322964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1688761834
    },
    {
        "content": "<p>A downside of these seminormable classes is that we need one for every normed class we currently have</p>",
        "id": 373336564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688767081
    },
    {
        "content": "<p>We'd need at least <code>NormableAddGroup</code>, <code>NormableModule</code>, <code>NormableRing</code>, <code>NormableAlgebra</code></p>",
        "id": 373336881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688767192
    },
    {
        "content": "<p>Maybe that's acceptable to unblock things on matrix analysis</p>",
        "id": 373337044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688767240
    },
    {
        "content": "<p>Why can't we make it a mixin?</p>",
        "id": 373339450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1688768228
    },
    {
        "content": "<p>In my above message I'm assuming they are mixins already</p>",
        "id": 373350759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688774460
    },
    {
        "content": "<p>If they're not mixins it becomes much worse</p>",
        "id": 373350791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688774475
    }
]