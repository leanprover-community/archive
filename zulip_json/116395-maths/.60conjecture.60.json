[
    {
        "content": "<p>Would it be reasonable to have a <code>conjecture</code> command that looks like <code>lemma</code> or <code>theorem</code>, but is really just a <code>def</code>?  E.g., these two lines would be identical, but one looks nice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">conjecture</span> <span class=\"n\">flt</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flt</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n</code></pre></div>\n<p>This way one could idiomatically add various conjectures to mathlib.  Or does this already exist in some form?</p>",
        "id": 396168151,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697060150
    },
    {
        "content": "<p>Note <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FermatLastTheorem#doc\">docs#FermatLastTheorem</a> already exists in mathlib (defined using regular <code>def</code> syntax); but indeed custom syntax could be nice if we end up with lots of these</p>",
        "id": 396168668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697060437
    },
    {
        "content": "<p>Not least, the docs are very sad.<br>\n<a href=\"/user_uploads/3121/JJRV7jrsVAfnirxQOw2Pnv7q/Screenshot-2023-10-11-at-10.41.00-PM.png\">Screenshot-2023-10-11-at-10.41.00-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JJRV7jrsVAfnirxQOw2Pnv7q/Screenshot-2023-10-11-at-10.41.00-PM.png\" title=\"Screenshot-2023-10-11-at-10.41.00-PM.png\"><img src=\"/user_uploads/3121/JJRV7jrsVAfnirxQOw2Pnv7q/Screenshot-2023-10-11-at-10.41.00-PM.png\"></a></div>",
        "id": 396168738,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697060481
    },
    {
        "content": "<p>We had a discussion similar to this a while ago. IIRC the conclusion was approximately that we could use classes for this purpose. So if you want to assume GRH for a number field <code>K</code>, you could write <code>lemma fancy_thing (K : Type*) [NumberField K] [HasGRH K] : ...</code>.</p>",
        "id": 396168745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697060489
    },
    {
        "content": "<p>Once the theoretical computer scientists arrive this stuff is going to be essential.</p>",
        "id": 396168877,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697060554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> For that it seems like you just want normal instances.  And then maybe a <code>conjecture</code> that says they always exist, but which one mostly doesn't use.</p>",
        "id": 396169009,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1697060642
    },
    {
        "content": "<p>I do think it is useful but <code>conjecture flt</code> to should translate to <code>def flt.prop</code> or something similar, as the name <code>flt</code> should be for a <em>proof</em> of flt.</p>",
        "id": 396280372,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697114612
    },
    {
        "content": "<p>We already handle this in mathlib by using <code>FermatLastTheorem</code> instead of <code>fermat_last_theorem</code></p>",
        "id": 396280843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697114793
    }
]