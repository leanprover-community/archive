[
    {
        "content": "<p>Two weeks and a half ago, we were looking for probability projects to give to LFTCM participants. <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> suggested the four functions theorem, aka Ahlswede-Daykin inequality, and <a href=\"#narrow/stream/113488-general/topic/Probability.20projects/near/389692585\">I claimed to have formalised it already</a>.</p>",
        "id": 393106105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674086
    },
    {
        "content": "<p>This was a lie. I got confused with the Ahlswede-Zhang identity, which is indeed proved and on its way to mathlib (<a href=\"https://github.com/leanprover-community/mathlib/pull/18612\">!3#18612</a>).</p>",
        "id": 393106134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674095
    },
    {
        "content": "<p>To make up for the calumny, I set to actually prove the Ahlswede-Daykin inequality. After two solid weeks of effort, this is now done, along with a handful of corollaries.</p>",
        "id": 393106168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674103
    },
    {
        "content": "<p>Here are the results I have, all available in <a href=\"https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/FourFunctions.lean\">LeanCamCombi</a>:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Ahlswede%E2%80%93Daykin_inequality\">The four functions theorem</a>, in (possibly infinite!) distributive lattices</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">four_functions_theorem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"n\">f₃</span> <span class=\"n\">f₄</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f₄</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f₁</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f₂</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f₃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f₄</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f₂</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span>\n      <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">pointwiseInfs</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f₃</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">pointwiseSups</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f₄</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>All references I could find only talk about finite distributive lattices, but in fact we can restrict the statement to the lattice generated by the finite sets <code>s</code> and <code>t</code>, and this lattice is always finite. This gives us extra generality for free.</p>\n<ul>\n<li>Daykin's inequality</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Finset.le_card_infs_mul_card_sups</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">s.card</span> <span class=\"bp\">*</span> <span class=\"n\">t.card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">pointwiseInfs</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">pointwiseSups</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>\n<ul>\n<li>Holley's inequality</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">holley</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hμ₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/FKG_inequality\">The Fortuin-Kastelyn-Ginibre inequality</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fkg</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ExistsAddOfLE</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hμ₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg₀</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">Monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊔</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>The Marica-Schönheim inequality, in generalised Boolean algebras. This is usually stated for finite Boolean algebras, but doesn't refer to <code>compl</code>, so we can go onto the Boolean algebra generated by our generalised Boolean algebra, prove the statement there, then pull back.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.le_card_diffs_mul_card_diffs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">GeneralizedBooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">pointwiseDiffs</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">pointwiseDiffs</span> <span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Finset.card_le_card_diffs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">GeneralizedBooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n    <span class=\"n\">card</span> <span class=\"n\">s</span>  <span class=\"bp\">≤</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">pointwiseDiffs</span> <span class=\"n\">s</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>The Marica-Schönheim special case of Graham's conjecture. This uses the Marica-Schönheim inequality in an infinite generalized Boolean algebra without complements (namely <code>Finset ℕ</code>), so both our generalisations of Ahlswede-Daykin to infinite distributive lattices and of Marica-Schönheim to generalised Boolean algebras were necessary.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">marica_schoenheim</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">StrictMonoOn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Set.Iio</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Squarefree</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 393106219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674122
    },
    {
        "content": "<p>Of course, a formalisation wouldn't be fun without its boatload of unforeseen prerequisites. So here are some highlights from the past two weeks:</p>\n<ul>\n<li>Birkhoff's representation theorem: Any finite distributive lattice can be embedded into a finite powerset</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_birkhoff_representation.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">LatticeHom</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">β</span><span class=\"o\">)),</span>\n      <span class=\"n\">Injective</span> <span class=\"n\">f</span>\n</code></pre></div>\n<ul>\n<li>The Boolean algebra generated by a generalised Boolean algebra</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Boolean algebra containing a given generalised Boolean algebra `α` as a sublattice. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Booleanisation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instBooleanAlgebra</span> <span class=\"o\">:</span> <span class=\"n\">BooleanAlgebra</span> <span class=\"o\">(</span><span class=\"n\">Booleanisation</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The embedding from a generalised Boolean algebra to its generated Boolean algebra. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">inlLatticeHom</span> <span class=\"o\">:</span> <span class=\"n\">LatticeHom</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Booleanisation</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inlLatticeHom_injective</span> <span class=\"o\">:</span> <span class=\"n\">Injective</span> <span class=\"o\">(</span><span class=\"n\">inlLatticeHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n<ul>\n<li>Pointwise set difference of finite families and the API that goes with it</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diffs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">GeneralizedBooleanAlgebra</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">image₂</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">\\</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>Sublattices</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Sublattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">supClosed'</span> <span class=\"o\">:</span> <span class=\"n\">SupClosed</span> <span class=\"n\">carrier</span>\n  <span class=\"n\">infClosed'</span> <span class=\"o\">:</span> <span class=\"n\">InfClosed</span> <span class=\"n\">carrier</span>\n</code></pre></div>\n<ul>\n<li>Sublattice generated by a set, and the fact that it is finite if the generating set is</li>\n<li>Fancy new highly functional <code>ClosureOperator</code> API. After years of complaining about my own API, I've finally found a way to improve it.</li>\n</ul>",
        "id": 393106242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674136
    },
    {
        "content": "<p>There are a few more low-hanging fruits from here:</p>\n<ul>\n<li>Golf the mathlib proof of the Harris-Kleitman inequality (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsLowerSet.le_card_inter_finset#doc\">docs#IsLowerSet.le_card_inter_finset</a>), which I did a year ago without knowing that it was a corollary of Ahlswede-Daykin.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/XYZ_inequality\">The XYZ inequality</a>, aka Fishburn-Shepp</li>\n</ul>",
        "id": 393106279,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674146
    },
    {
        "content": "<p>In terms of size, this is about 2000 lines of material spread across 25 files. I am hoping to PR all that to mathlib shortly with the maintainers' collaboration, but my term is starting next week.</p>",
        "id": 393106288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695674150
    },
    {
        "content": "<p>Brilliant!</p>\n<p>Does this work more generally? Yaël, have you by any chance proven the lost fur mat theorem or the ferment lust theorem or anything like that? (If you have, then the follow-up is obvious: we just need to trick you into reading a subsequent message carelessly and then wait for LeanCamCombi to catch up...) <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>Ok, but this is seriously nice! I hope especially Holley and FKG are PRd to Mathlib in not too distant future. They would pretty instantly enable some interesting percolation results, and I certainly have also other applications in mind in a slightly longer term. (I suspect <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> would have even more...).</p>",
        "id": 393111009,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1695675953
    },
    {
        "content": "<p>I actually looked up what the lost fur mat theorem was. <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 393168052,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695708671
    },
    {
        "content": "<p>Please feel free into being tricked into working for me for two solid weeks :-)</p>",
        "id": 393191382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695718794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span>, since you're so excited about the result, I spent a few hours this morning opening prerequisite PRs. I've collated them in a Github project. Review as it suits you <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> : <a href=\"https://github.com/orgs/leanprover-community/projects/12/views/1\">https://github.com/orgs/leanprover-community/projects/12/views/1</a></p>",
        "id": 393208018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695725389
    },
    {
        "content": "<p>The link to the Github project doesn't work for me... (Organizing the PRs like that sounds quite helpful in principle, though.)</p>\n<p>I'd be happy to try to review if there are sufficiently simple pieces for someone who isn't yet well-versed in Mathlib's tricks and design. (Also the earliest I can try is the weekend and I can't even promise to have time then.)</p>\n<p>And yes, I'm indeed very happy about this. Thanks a lot for getting confused!</p>",
        "id": 393340693,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1695767329
    },
    {
        "content": "<p>Hmm, would a <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> mind changing the visibility of the project from <code>private</code> to something else?</p>",
        "id": 393390108,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695789823
    },
    {
        "content": "<p>Update: I've just PRed the second big result, namely Birkhoff's representation theorem, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7417\">#7417</a>. It depends on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7374\">#7374</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7375\">#7375</a>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/7416\">#7416</a> which are all ready for review (and pretty easy).</p>",
        "id": 393623158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695880488
    },
    {
        "content": "<p><code>λ</code> is forbidden in mathlib, can you use <code>fun</code> instead in these PRs?</p>",
        "id": 393623447,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695880672
    },
    {
        "content": "<p>Done</p>",
        "id": 393629878,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1695883394
    },
    {
        "content": "<p>Update: I've opened the last big prerequisite: sublattices (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7549\">#7549</a>). Four functions itself is now living at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7551\">#7551</a>. I highly encourage people to have a look at <a href=\"https://github.com/orgs/leanprover-community/projects/12\">the Github project</a> and review the three prerequisite PRs remaining.</p>",
        "id": 395269156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696601730
    },
    {
        "content": "<p>There are still lots of lambdas there</p>",
        "id": 395313031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696618295
    },
    {
        "content": "<p>Update: Birkhoff's representation theorem (<a href=\"https://github.com/leanprover-community/mathlib4/pull/7417\">#7417</a>) is up for grab!</p>",
        "id": 397880891,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697926755
    },
    {
        "content": "<p>Now three PRs away!</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/7417\">#7417</a>: Birkhoff's representation theorem</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/7549\">#7549</a>: Sublattices</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/7551\">#7551</a>: Four functions theorem</li>\n</ul>",
        "id": 398701862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698330552
    },
    {
        "content": "<p>... and now the main PR is ready to be reviewed: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7551\">#7551</a></p>",
        "id": 399385844,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698704732
    },
    {
        "content": "<p>It's in! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 400177980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699032497
    }
]