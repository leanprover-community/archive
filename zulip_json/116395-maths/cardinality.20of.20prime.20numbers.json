[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.PrimeFin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat.Primes</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">countable'</span> <span class=\"o\">:</span> <span class=\"n\">Countable</span> <span class=\"n\">Primes</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">Subtype.val</span><span class=\"o\">,</span> <span class=\"n\">coe_nat_injective</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSet</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">Prime</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">infinite'</span> <span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">Primes</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">finp</span> <span class=\"bp\">↦</span>\n    <span class=\"k\">have</span> <span class=\"n\">fins</span> <span class=\"o\">:</span> <span class=\"n\">toSet.Finite</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Set.toFinite</span> <span class=\"n\">ℕ</span> <span class=\"n\">toSet</span> <span class=\"n\">finp</span>\n    <span class=\"n\">infinite_setOf_prime</span> <span class=\"n\">fins</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_mk_eq_aleph0</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Primes</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk_eq_aleph0</span> <span class=\"n\">Primes</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat.Primes</span>\n</code></pre></div>\n<p>I've just proved in Lean that the cardinality of the type of prime numbers is aleph-null. Do we want to include some part of the above code in Mathlib?</p>",
        "id": 379605118,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1690569746
    },
    {
        "content": "<p>I think those all look fine except <code>def toSet := { p | Prime p }</code> which seems pretty useless</p>",
        "id": 379607122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690570248
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Infinite.to_subtype#doc\">docs#Set.Infinite.to_subtype</a> is how you're meant to go to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Infinite#doc\">docs#Infinite</a></p>\n<p>You'd write <code>instance : Infinite {p | Prime p} := Nat.infinite_setOf_prime.to_subtype</code> (untested)</p>",
        "id": 379607728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690570382
    },
    {
        "content": "<p>This instance seems reasonable to add to <code>Mathlib/Data/Nat/PrimeFin.lean</code></p>",
        "id": 379608230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690570505
    },
    {
        "content": "<p>Thanks, everyone. I'll soon make a PR to Mathlib. Edit: see <a href=\"https://github.com/leanprover-community/mathlib4/pull/6238\">#6238</a>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Fixed code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.PrimeFin</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat.Primes</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">countable'</span> <span class=\"o\">:</span> <span class=\"n\">Countable</span> <span class=\"n\">Primes</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">coeNat.coe</span><span class=\"o\">,</span> <span class=\"n\">coe_nat_injective</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">infinite'</span> <span class=\"o\">:</span> <span class=\"n\">Infinite</span> <span class=\"n\">Primes</span> <span class=\"o\">:=</span> <span class=\"n\">infinite_setOf_prime.to_subtype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Cardinal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cardinal_mk_eq_aleph0</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">Primes</span> <span class=\"bp\">=</span> <span class=\"n\">ℵ₀</span> <span class=\"o\">:=</span> <span class=\"n\">Cardinal.mk_eq_aleph0</span> <span class=\"n\">Primes</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat.Primes</span>\n</code></pre></div>\n</div></div>",
        "id": 379820571,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1690641976
    },
    {
        "content": "<p>Should we have a <code>Denumerable</code> instance for primes?</p>",
        "id": 379902753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690672995
    }
]