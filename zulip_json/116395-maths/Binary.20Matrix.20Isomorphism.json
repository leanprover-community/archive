[
    {
        "content": "<p>Hello, I am new to Lean but want to explore it to see if it can help me with my problem. I tried other mathematical software tools such as SageMath and Nauty, but I couldn't quite figure out how to solve my problem with those tools yet.</p>\n<p>I am working with incidence matrix representations of graphs/hypergraphs (binary matrices), and I would like to compare a smaller matrix to a larger one to see if the larger one can \"consume\" the smaller one (that is, can all of the 1's in the smaller matrix match up directly to some subset of 1's in the larger matrix?). Given the smaller matrix, I would like to \"broadcast\" it to the size of the larger matrix by padding it with rows and columns of 0's. I would then like to generate all distinct isomorphs of the broadcasted matrix using row/column permutations to see if any of these can match up to the larger matrix. We are trying to take advantage of GPUs for rapid matrix multiplication, so I have been thinking about a group-theoretic approach that would involve creating a cyclic matrix group for each broadcasted matrix so that each unique permutation can be generated via matrix multiplication without any duplicates.</p>\n<p>I'm happy to provide additional context and clarification. Any advice or suggestions would be very much appreciated. Thank you!</p>",
        "id": 357962299,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1683917296
    },
    {
        "content": "<p>Is discarding rows from the larger matrix to obtain the smaller one allowed?</p>",
        "id": 357975619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683921660
    },
    {
        "content": "<p>Or does every nonzero row/column of the large one have to be represented in the small one?</p>",
        "id": 357975729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683921699
    },
    {
        "content": "<p>Every nonzero row/column of the small one must be represented in the large one (not the other way around). Discarding rows/columns of the large one to obtain the smaller one is one option, but it might be too computationally expensive since we still have to permute the remaining rows/columns of the \"minimized\" larger matrix (and I think we would have to find every distinct permutation for every minimization).</p>",
        "id": 357986108,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1683925621
    },
    {
        "content": "<p><del>So is taking the large matrix as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> and the \"small\" matrix as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mstyle scriptlevel=\"1\"><mtable rowspacing=\"0.1em\" columnspacing=\"0.2778em\"><mtr><mtd><mstyle scriptlevel=\"1\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"1\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"1\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"1\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr></mtable></mstyle><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\left[\\begin{smallmatrix}0&amp;0\\\\0&amp;1\\end{smallmatrix}\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2622em;vertical-align:-0.3811em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8811em;\"><span style=\"top:-3.13em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight sizing reset-size6 size3\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-2.4989em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight sizing reset-size6 size3\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3811em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.1945em;\"></span><span class=\"arraycolsep\" style=\"width:0.1945em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8811em;\"><span style=\"top:-3.13em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight sizing reset-size6 size3\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-2.4989em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mtight sizing reset-size6 size3\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3811em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">]</span></span></span></span></span></span> allowed?</del> nevermind, I don't think the case I'm trying to construct (two columns of the small matrix being replaced by the same column of the large one) exists</p>",
        "id": 357992390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683928232
    },
    {
        "content": "<p>To un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this, you're looking for an algorithm to determine if a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.embedding\">docs#simple_graph.embedding</a>  exists between two graphs (starting with the incidence matrix)?</p>",
        "id": 357993891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683928957
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, I think there's a typo in that docstring, I assume one of the <code>G</code>s should be a <code>G'</code>)</p>",
        "id": 357994000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683929023
    },
    {
        "content": "<p>Yes, I think that's correct (although I must admit that I'm not too familiar with category theory). Since we are trying to exploit GPUs, the algorithm would ideally be implemented in a way that heavily utilizes matrix multiplication operations.</p>",
        "id": 358006319,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1683934511
    },
    {
        "content": "<p>This seems relevant: <a href=\"https://mathoverflow.net/questions/67963/defining-a-canonical-ordering-of-matrix-rows-columns\">https://mathoverflow.net/questions/67963/defining-a-canonical-ordering-of-matrix-rows-columns</a></p>\n<p>If I understand correctly, this seems to be the problem you are trying to solve?  <a href=\"https://en.wikipedia.org/wiki/Subgraph_isomorphism_problem\">https://en.wikipedia.org/wiki/Subgraph_isomorphism_problem</a></p>",
        "id": 358023796,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683942875
    },
    {
        "content": "<p>Yes, the problem is essentially subgraph isomorphism, but we realize that it's NP-hard. We're hoping that we can find some heuristic for our specific problem by creating a permutation group for each of the smaller matrices such that we can generate all distinct row/column permutations and compare each one to the larger matrix.</p>",
        "id": 358567310,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684183292
    },
    {
        "content": "<p>We need to know which exact permutation actually matches the larger matrix, not just whether any permutation of the smaller matrix matches, which is why a canonical comparison probably would not suffice.</p>",
        "id": 358567835,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684183509
    },
    {
        "content": "<p>Something to be aware of is that Lean's mathematical library isn't optimized for computation, but rather for proving abstract things. There might be a <code>SimpleGraph</code> type, but it's really just an interface for an abstract symmetric irreflexive relation.</p>\n<p>I'm not aware of anything that compiles Lean to anything that is optimized for GPUs either.</p>",
        "id": 358568243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684183673
    },
    {
        "content": "<p>Even the mathlib matrix type is more of an abstract interface than something you would directly calculate with.</p>",
        "id": 358568369,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684183714
    },
    {
        "content": "<p>It's probably best not to think of Lean as being comparable to Sage, at least at the moment, if that's why you're interested in potentially using Lean for your project.</p>",
        "id": 358568558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684183796
    },
    {
        "content": "<p>I see, thank you for the clarification.</p>",
        "id": 358568686,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684183840
    },
    {
        "content": "<p>It <em>can</em> be used for computations, but the experience you should expect is like you are using a functional programming language like Haskell.</p>",
        "id": 358568775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684183876
    },
    {
        "content": "<p>Just for a couple examples, I once <a href=\"https://github.com/kmill/lean4-raytracer\">wrote a toy raytracer</a> and <a href=\"https://github.com/kmill/arrow_poly\">computed a bunch of Jones-like polynomials of knots</a>, both of which are very CPU heavy. For the second, I needed to write my own implementation of polynomials.</p>",
        "id": 358569003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684183957
    },
    {
        "content": "<p>Very cool!</p>",
        "id": 358582790,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684189883
    },
    {
        "content": "<p>Would you recommend sticking with Sage for this problem then?</p>",
        "id": 358582825,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684189913
    },
    {
        "content": "<p>To be honest from what you've said about the problem so far Sage doesn't terrible, and you probably just want C. :-)</p>",
        "id": 358621699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684212999
    },
    {
        "content": "<p>Understood! I think Sage would work if I can figure out how to generate the cosets of the automorphism group in the group of all row/column permutations for each specific matrix, or if I can find a systematic/algorithmic method for finding all of the generators for distinct row/column permutations for each matrix. I have been trying to find an algorithm for the second option by playing around with permuting equivalence classes of rows and columns (where identical rows and identical columns are grouped together in the same class), but I am generating too many duplicates and not enough of the possible distinct permutations.</p>",
        "id": 358794715,
        "sender_full_name": "Gobind Puniani",
        "timestamp": 1684256494
    }
]