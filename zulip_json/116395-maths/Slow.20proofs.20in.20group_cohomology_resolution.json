[
    {
        "content": "<p>There are some one line proofs <a href=\"https://github.com/leanprover-community/mathlib/blob/6efec6bb9fcaed3cf1baaddb2eaadd8a2a06679c/src/representation_theory/group_cohomology_resolution.lean#L170-L177\">here</a> in a file of mine that take about a minute to compile. Could anyone help me understand why this is? Fwiw I <a href=\"https://github.com/leanprover-community/mathlib/pull/18271\">refactored</a> these maps to use more category theory and general building blocks and the code is way faster. But again, I don't know why :) many thanks for any help.</p>",
        "id": 329615541,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677117042
    },
    {
        "content": "<p>For the first one: <code>by apply to_tensor_aux_single f m</code> is super fast, haha<br>\nThe original <code>to_tensor_aux_single _ _</code> takes 41.2s, and <code>by apply to_tensor_aux_single</code> (without specifying <code>f</code> and <code>m</code>) takes 22.9s for me.<br>\nFor the second: <code>by apply of_tensor_aux_single g m x</code><br>\nI've observed the magic of <code>by apply</code> before but don't really understand it. Lean spends too much time on unification without it, apparently.</p>",
        "id": 329630033,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677129503
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 329685063,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677149534
    },
    {
        "content": "<p>Does <code>(foo : _)</code> work in the same places that <code>by apply foo</code> does?</p>",
        "id": 329692602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677151728
    },
    {
        "content": "<p>It compiles, but still takes about 40s for the first lemma to compile and 26s for the second</p>",
        "id": 329774942,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1677172358
    },
    {
        "content": "<p>On my machine:<br>\n<code>to_tensor_aux_single _ _</code> 23.9s (not sure why I got 41.2s last time)<br>\n<code>to_tensor_aux_single f m</code> 23.5s<br>\n<code>id $ to_tensor_aux_single f m</code> 23.6s<br>\n<code>by apply to_tensor_aux_single</code> 22.9s<br>\n<code>(to_tensor_aux_single f m : _)</code> 12.2s<br>\n<code>id to_tensor_aux_single f m</code> 10s<br>\n<code>(id to_tensor_aux_single f m : _)</code> ~70ms<br>\n<code>by apply to_tensor_aux_single f m</code> ~70ms<br>\n<code>(id (to_tensor_aux_single f m) : _)</code> ~70ms</p>\n<p>Note <code>to_tensor</code> and <code>of_tensor</code> are still slow and I've not found a good way to speed them up.</p>",
        "id": 336361622,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1677194241
    }
]