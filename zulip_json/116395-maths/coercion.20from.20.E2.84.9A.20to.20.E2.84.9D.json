[
    {
        "content": "<p>What's the canonical name for the coercion from <code>rat</code> to <code>real</code>? I had imagined <code>coe</code>, but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>times out.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_semiring_hom</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>works fine, but I need that it's injective and <code>rat.cast_injective</code> works with <code>coe</code>. Which one am I supposed to be using?</p>",
        "id": 186033091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579425741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">schroeder_bernstein</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">countable</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebraic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cardinality</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>might be relevant here (this is work of a student)</p>",
        "id": 186033213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426037
    },
    {
        "content": "<p>In such an algebraic context I would say <code>rat.cast</code> is what you want. Here you are really using that <code>ℝ</code> is a division ring, not the fact that it contains <code>ℚ</code>.</p>",
        "id": 186033316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579426234
    },
    {
        "content": "<p><code>coe</code> is defeq to <code>rat.cast</code></p>",
        "id": 186033394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579426441
    },
    {
        "content": "<p>It is written using <code>coe</code>, but the lemmas have <code>rat.cast</code> based names</p>",
        "id": 186033441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579426481
    },
    {
        "content": "<p>I know they're defeq but I got that timeout. Is it a missing instance then?</p>",
        "id": 186033551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426730
    },
    {
        "content": "<p>A student wants to pass from Q[X] to R[X] a lot</p>",
        "id": 186033605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579426823
    },
    {
        "content": "<p>it's a missing instance</p>",
        "id": 186034513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579428807
    }
]