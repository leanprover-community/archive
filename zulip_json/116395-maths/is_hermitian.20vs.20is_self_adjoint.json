[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_hermitian\">docs#matrix.is_hermitian</a> is defeq to the more general <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint\">docs#is_self_adjoint</a>; should we remove the former entirely, or keep it as an abbreviation of the latter?</p>",
        "id": 339964929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678135627
    },
    {
        "content": "<p>I would vote for removing it entirely.</p>",
        "id": 339973777,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1678139286
    },
    {
        "content": "<p>I prefer removing it also, but I'm okay with an <code>abbrev</code> if others want it.</p>",
        "id": 339974435,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678139536
    },
    {
        "content": "<p>I think both names are commonly used, so keeping an abbreviation would make things easier for people searching for the concept (or wouldn't it? docstrings are enough for the search facilities?)</p>",
        "id": 339975287,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1678139889
    },
    {
        "content": "<p>With an <code>abbrev</code> could we retain the current dot notation advantages of <code>matrix.is_hermitian</code>?</p>\n<p>Looking at <code>linear_algebra.matrix.hermitian</code> there are several things which are duplicates of similar facts for <code>is_self_adjoint</code> (e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_hermitian_mul_conj_transpose_self\">docs#matrix.is_hermitian_mul_conj_transpose_self</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint.mul_star_self\">docs#is_self_adjoint.mul_star_self</a>, or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_hermitian_mul_mul_conj_transpose\">docs#matrix.is_hermitian_mul_mul_conj_transpose</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint.conjugate\">docs#is_self_adjoint.conjugate</a>, and plenty others), so there is quite a bit of duplication here.</p>",
        "id": 339975588,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678140005
    },
    {
        "content": "<p>Ah the very least we should replace all the proofs with calls to the is_self_adjoint lemmas</p>",
        "id": 339995261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678149254
    },
    {
        "content": "<p>It turns out a lot of lemmas about <code>is_self_adjoint</code> are not stated generally enough to be used to prove the matrix results; I've tried to fix that in <a href=\"https://github.com/leanprover-community/mathlib/pull/18558\">#18558</a></p>",
        "id": 340355158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678280826
    },
    {
        "content": "<p>... and some instances about matrices are not general enough to apply the self-adjoint lemmas: <a href=\"https://github.com/leanprover-community/mathlib/pull/18563\">#18563</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/18557\">#18557</a></p>",
        "id": 340399009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678290616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18565\">#18565</a> replaces a handful of proofs of <code>is_hermitian_foo</code> with <code>is_self_adjoint_foo _</code>, and generalizes a few results in the other direction too.</p>",
        "id": 340466070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678310225
    },
    {
        "content": "<p>Oh no: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_self_adjoint\">docs#matrix.is_self_adjoint</a></p>",
        "id": 340466933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678310587
    },
    {
        "content": "<p>that's a genuinely distinct concept, but it would be nice if either it were named differently or else the docstring mentioned the relationship to <code>is_self_adjoint</code>, and maybe a lemma linking the concepts when they coincide.</p>",
        "id": 340488034,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678320358
    },
    {
        "content": "<p>I think the link is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">has_trivial_star</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.is_self_adjoint</span> <span class=\"mi\">1</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">is_self_adjoint</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 340524788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678344519
    },
    {
        "content": "<p>Is the requirement that <code>star</code> is trivial expected?</p>",
        "id": 340525130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678344661
    },
    {
        "content": "<p>oof, that's painful. Here's what I suspect, but I don't know for sure: this is a relic of stuff on bilinear forms that existed before the semilinear map refactor. At the time there would have been no way to \"properly\" handle sesquilinear forms, which is probably what you would really want in order not to need <code>has_trivial_star</code>. </p>\n<p>The above is only my impression after a cursory glance. It may be wrong. Maybe just adding an appropriate note to the docstring would be enough for now, but I'm not really sure what to say.</p>",
        "id": 340526258,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678345211
    },
    {
        "content": "<p>Would you expect <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_adjoint_pair\">docs#matrix.is_adjoint_pair</a> to be defined with ᴴ then instead?</p>",
        "id": 340526663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678345403
    },
    {
        "content": "<p>maybe or else this: <code>J.is_self_adjoint A₁ := J.is_adjoint_pair J A₁ A₁ᴴ</code></p>",
        "id": 340527401,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678345683
    },
    {
        "content": "<p>I'm tired, so I may not be thinking about this clearly at the moment.</p>",
        "id": 340527473,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678345709
    },
    {
        "content": "<p>The right way to think about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_adjoint_pair\">docs#matrix.is_adjoint_pair</a> is that it should be the matrix version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.is_adjoint_pair\">docs#linear_map.is_adjoint_pair</a> right ?</p>",
        "id": 340528141,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678346017
    },
    {
        "content": "<p>If so then indeed I think the right thing is to apply the ring hom <code>I</code> (of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.is_adjoint_pair\">docs#linear_map.is_adjoint_pair</a>) to the transposed matrix in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.is_self_adjoint\">docs#matrix.is_self_adjoint</a></p>",
        "id": 340528447,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678346133
    },
    {
        "content": "<p>Do we keep around an <code>I</code>, or just assume that <code>star_ring_end</code> is the right <code>I</code> for matrices?</p>",
        "id": 342401705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678993864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/is_hermitian.20vs.20is_self_adjoint/near/340466070\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18565\">#18565</a> replaces a handful of proofs of <code>is_hermitian_foo</code> with <code>is_self_adjoint_foo _</code>, and generalizes a few results in the other direction too.</p>\n</blockquote>\n<p>Also, it would be great if someone could take a look at this; once it's in, I plan to forward-port the changes to <code>self_adjoint.lean</code> that I made in some previous PRs.</p>",
        "id": 342401795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678993898
    },
    {
        "content": "<p>I'll look at this and your quaternion PR now. I already briefly looked at the latter on mobile.</p>",
        "id": 342402188,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678994028
    },
    {
        "content": "<p>What do you mean by \"keep around an <code>I</code>\"?</p>",
        "id": 342403169,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678994329
    },
    {
        "content": "<p>I've left some comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/18565\">#18565</a></p>",
        "id": 342407274,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678995538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/is_hermitian.20vs.20is_self_adjoint/near/342403169\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"keep around an <code>I</code>\"?</p>\n</blockquote>\n<p>I mean \"parameterize the matrix version with an arbitrary ring hom\" as opposed to 'use the canonical star one\"</p>",
        "id": 342408748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678996076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/is_hermitian.20vs.20is_self_adjoint/near/342402188\">said</a>:</p>\n<blockquote>\n<p>I'll look at this and your quaternion PR now. I already briefly looked at the latter on mobile.</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 342409070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678996188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/is_hermitian.20vs.20is_self_adjoint/near/342401705\">said</a>:</p>\n<blockquote>\n<p>Do we keep around an <code>I</code>, or just assume that <code>star_ring_end</code> is the right <code>I</code> for matrices?</p>\n</blockquote>\n<p>I think that the two sides of the API (linear maps and matrices) should be as close as possible to each other, so I’d keep the <code>I</code></p>",
        "id": 342411657,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1678996972
    }
]