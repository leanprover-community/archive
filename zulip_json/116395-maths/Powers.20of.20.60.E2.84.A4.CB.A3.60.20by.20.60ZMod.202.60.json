[
    {
        "content": "<p>Does the following look like a reasonable instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- There is a canonical power operation by `ℤˣ` on `ZMod 2`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pow</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pow</span> <span class=\"n\">s</span> <span class=\"n\">z₂</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">z₂.val</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">z₂pow_def</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">x.val</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">z₂pow_zero</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pow_zero</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">z₂pow_one</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">pow_one</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">z₂pow_add</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"bp\">ˣ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ZMod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">z₂pow_def</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ZMod.val_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_eq_pow_mod</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">]</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 396291926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697118528
    },
    {
        "content": "<p>(feel free to move to #mathlib4 if this isn't quite mathematical enough)</p>",
        "id": 396291993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697118546
    },
    {
        "content": "<p>Obviously that would all be more readable once we fix <a href=\"https://github.com/leanprover/lean4/pull/2220\">lean4#2220</a></p>",
        "id": 396292054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697118564
    },
    {
        "content": "<p>The motivation is to define the <a href=\"https://planetmath.org/gradedtensorproduct\">tensor product of graded algebras / graded tensor product / super tensor product</a> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7394\">#7394</a>, where I need</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⊗</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>⊗</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>deg</mi><mo>⁡</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>deg</mi><mo>⁡</mo><mi>b</mi></mrow></msup><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>⋅</mo><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a \\otimes b) \\cdot (a&#x27; \\otimes b&#x27;) = (-1)^{\\deg a&#x27; \\deg b} (a \\cdot a&#x27;) \\otimes (b \\cdot b&#x27;)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2425em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9925em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">d</span><span class=\"mtight\">e</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8278em;\"><span style=\"top:-2.931em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mop mtight\"><span class=\"mtight\">d</span><span class=\"mtight\">e</span><span class=\"mtight\" style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>to make sense, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>deg</mi><mo>⁡</mo><msup><mi>a</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">\\deg a&#x27; :</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mop\">de<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span></span></span></span> <code>ZMod 2</code></p>",
        "id": 396301040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697121070
    },
    {
        "content": "<p>Any  group has this instance.</p>",
        "id": 396302781,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697121596
    },
    {
        "content": "<p>I mean, it should have</p>",
        "id": 396302846,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697121605
    },
    {
        "content": "<p>I assume you mean that any group has an instance <code>Pow G (ZMod (orderOf G))</code>?</p>",
        "id": 396302962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697121651
    },
    {
        "content": "<p>Yes, sorry</p>",
        "id": 396303091,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697121699
    },
    {
        "content": "<p>But it is probably not very useful</p>",
        "id": 396303142,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697121715
    },
    {
        "content": "<p>Though that feels a little awkward because you need <code>orderOf G</code> to match <code>2</code></p>",
        "id": 396303272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697121744
    },
    {
        "content": "<p>Yes, your instance is probably better.</p>",
        "id": 396303370,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1697121780
    },
    {
        "content": "<p>I guess you could either:</p>\n<ol>\n<li>have a <code>IsOfOrder G 2</code> typeclass, to match <code>CharP</code></li>\n<li>Just have an instance for any <code>ZMod n</code>, where the lemmas only apply if <code>orderOf G = n</code></li>\n</ol>",
        "id": 396303397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697121787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/396303142\">said</a>:</p>\n<blockquote>\n<p>But it is probably not very useful</p>\n</blockquote>\n<p><del>It wouldn't surprise me if I need this instance for <code>ZMod 2 \\times ZMod 2</code>...</del></p>",
        "id": 396303789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697121914
    },
    {
        "content": "<p>I actually like this</p>",
        "id": 396304069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697121995
    },
    {
        "content": "<p>My original or Riccardo's extension via one of my two suggestions?</p>",
        "id": 396304148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697122022
    },
    {
        "content": "<p>Riccardo's via your two suggestions</p>",
        "id": 396304489,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697122128
    },
    {
        "content": "<p>And maybe the <code>n</code> in <code>IsOfOrder G n</code> can be an outparam?</p>",
        "id": 396330299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1697130173
    },
    {
        "content": "<p>Until someone adds an <code>IsOfOrder G (OrderOf G)</code>instance...</p>",
        "id": 396358475,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697141964
    },
    {
        "content": "<p>Did you see <a href=\"https://github.com/leanprover-community/mathlib4/pull/6720\">#6720</a>?</p>",
        "id": 396392572,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1697159114
    },
    {
        "content": "<p>No, but I remember reviewing a very similar PR for mathlib3, <a href=\"https://github.com/leanprover-community/mathlib/pull/11204\">!3#11204</a></p>",
        "id": 396431064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697177367
    },
    {
        "content": "<p>(and being opposed to it)</p>",
        "id": 396431275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697177453
    },
    {
        "content": "<p>I'll ping <span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> though since I see that the ZMod 2 case was specifically mentioned in a comment there</p>",
        "id": 396432086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697177896
    },
    {
        "content": "<p>If a good map <code>ZMod 2 → ℤ</code> sending the class of <code>n</code> to <code>(-1)^n</code> is defined, I would not mind redefining <code>Int.negOnePow : ℤ → ℤ</code> as an abbreviation for it, as long as it is as practical to use.</p>",
        "id": 396449816,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697184195
    },
    {
        "content": "<p>I guess my objection is to the fact the map goes to <code>ℤ</code> and not <code>ℤˣ</code></p>",
        "id": 396455446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697185743
    },
    {
        "content": "<p>Why do you want it i n<code>ℤ</code>?</p>",
        "id": 396455504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697185757
    },
    {
        "content": "<p>And just to check, is <code>ZMod 2</code> your only use-case, or do you have some interest in the <code>ZMod (orderOf G)</code> discussion above?</p>",
        "id": 396455923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697185862
    },
    {
        "content": "<p>Isn't <code>ZMod (orderOf G)</code> going to be really annoying to use in practice?</p>",
        "id": 396457015,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697186202
    },
    {
        "content": "<p>Not if we go via a <code>HasOrderOf</code> typeclass, I would guess</p>",
        "id": 396459432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697186973
    },
    {
        "content": "<p>By analogy we could add a <code>[CharP R p] : AddAction (Zmod p) R</code> instance today if we wanted, which I think would be easy to use, but pretty niche</p>",
        "id": 396459602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697187018
    },
    {
        "content": "<p>But really my question is \"can I get away with the p=2 special case and a TODO comment in the short term?\".</p>",
        "id": 396459798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697187082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/396455504\">said</a>:</p>\n<blockquote>\n<p>Why do you want it i n<code>ℤ</code>?</p>\n</blockquote>\n<p>For example, if <code>x : K ⟶ L</code> is a morphism in a preadditive category and <code>n : ℤ</code>, I would like to be able to use a syntax as simple as <code>n.negOnePow • x</code>. I have done experiments with <code>((-1 : Units ℤ) ^ n : ℤ) • x</code>, and it was not practical. I have also experimented with using the scalar multiplication <code>SMul ℤˣ (K ⟶ L)</code>, but handling interactions between <code>neg</code> and <code>SMul ℤˣ (K ⟶ L)</code> was quite annoying.</p>",
        "id": 396460054,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697187167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/396460054\">said</a>:</p>\n<blockquote>\n<p>I have also experimented with using the scalar multiplication <code>SMul ℤˣ (K ⟶ L)</code>, but handling interactions between <code>neg</code> and <code>SMul ℤˣ (K ⟶ L)</code> was quite annoying.</p>\n</blockquote>\n<p>This is the strategy I am advocating</p>",
        "id": 396460558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697187358
    },
    {
        "content": "<p>The main annoyance I'm aware of is that you have to remember to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.neg_smul#doc\">docs#Units.neg_smul</a> not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_smul#doc\">docs#neg_smul</a></p>",
        "id": 396460666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697187388
    },
    {
        "content": "<p>As I said, I do not care about implementations details, as long as the syntax is simple and the API just works.</p>",
        "id": 396461738,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697187726
    },
    {
        "content": "<p>My claim is that the API  for <code>SMul ℤˣ</code> already \"just works\", but it sounds like for you it didn't; I'd like to know where it didn't work so that I can fix it!</p>",
        "id": 396463972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697188400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/396460666\">said</a>:</p>\n<blockquote>\n<p>The main annoyance I'm aware of is that you have to remember to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Units.neg_smul#doc\">docs#Units.neg_smul</a> not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=neg_smul#doc\">docs#neg_smul</a></p>\n</blockquote>\n<p>can this be fixed with some of the neg typeclasses?</p>",
        "id": 396465594,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697188864
    },
    {
        "content": "<p>We would need a smul version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=HasDistribNeg#doc\">docs#HasDistribNeg</a></p>",
        "id": 396465675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697188899
    },
    {
        "content": "<p>At the very least, there must be missing lemmas like <code>CategoryTheory.Preadditive.comp_smul_units</code> and <code>CategoryTheory.Preadditive.smul_units_comp</code>.</p>",
        "id": 396465997,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697189010
    },
    {
        "content": "<p>Can you link the existing lemmas?</p>",
        "id": 396466528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697189166
    },
    {
        "content": "<p>We would need the \"units\" version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Preadditive.comp_zsmul#doc\">docs#CategoryTheory.Preadditive.comp_zsmul</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Preadditive.zsmul_comp#doc\">docs#CategoryTheory.Preadditive.zsmul_comp</a> or more generally of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Linear.comp_smul#doc\">docs#CategoryTheory.Linear.comp_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Linear.smul_comp#doc\">docs#CategoryTheory.Linear.smul_comp</a><br>\nWe would also need a suitable adaptation of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Functor.map_zsmul#doc\">docs#CategoryTheory.Functor.map_zsmul</a></p>",
        "id": 396468120,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697189690
    },
    {
        "content": "<p>Presumably, for your applications, you would also need similar lemmas for the interaction between composition of linear maps and the scalar multiplication by a unit.</p>",
        "id": 396468511,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697189802
    },
    {
        "content": "<p>In my case I just used <code>ext</code> followed by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.smul_apply#doc\">docs#LinearMap.smul_apply</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.map_smul_of_tower#doc\">docs#LinearMap.map_smul_of_tower</a></p>",
        "id": 396468949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697189937
    },
    {
        "content": "<p>But in fact  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.smul_comp#doc\">docs#LinearMap.smul_comp</a> already handles the units case</p>",
        "id": 396469071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697189974
    },
    {
        "content": "<p>I guess the analog for your lemmas would be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AddMonoidHom.map_zsmul#doc\">docs#AddMonoidHom.map_zsmul</a>, which indeed is missing a <code>Units</code> version</p>",
        "id": 396469351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697190063
    },
    {
        "content": "<p>The proofs are easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp_smul_units</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⟶</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Preadditive.comp_zsmul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>These are just missing lemmas.</p>",
        "id": 396470731,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697190529
    },
    {
        "content": "<p>@loogle Units ℤ, HSMul.hSMul</p>",
        "id": 396472181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697190980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span>  Units ℤ, HSMul.hSMul</p>",
        "id": 396472217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697190991
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Alternating.html#AlternatingMap.domDomCongr_perm\">AlternatingMap.domDomCongr_perm</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Alternating.html#AlternatingMap.map_congr_perm\">AlternatingMap.map_congr_perm</a>, and <a href=\"https://loogle.lean-lang.org/?q=Units%20%E2%84%A4%2C%20HSMul.hSMul\">16 more</a></p>",
        "id": 396472221,
        "sender_full_name": "loogle",
        "timestamp": 1697190992
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AbsoluteValue.map_units_int_smul#doc\">docs#AbsoluteValue.map_units_int_smul</a>  seems to be the only precedent so far for that style of lemma</p>",
        "id": 396472341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697191035
    },
    {
        "content": "<p>I am trying to see  whether making <code>Preadditive.comp_zsmul</code> a simp lemma (which they are not currently) breaks anything. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7658\">#7658</a></p>",
        "id": 396472919,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697191212
    },
    {
        "content": "<p><code>Preadditive.comp_zsmul</code> cannot be made a simp lemma (because it is generalized by <code>Linear.comp_smul</code>). Then, the better phrasing of <code>comp_units_smul</code> lemmas etc. should be in terms of linear categories rather than preadditive categories.</p>",
        "id": 396483579,
        "sender_full_name": "Joël Riou",
        "timestamp": 1697195176
    },
    {
        "content": "<p>I think the strategy I'm advocating of piling <code>IsScalarTower</code>/<code>SMulCommClass</code> on existing lemmas so they work automatically probably won't help with category theory, so I certainly am happy with <a href=\"https://github.com/leanprover-community/mathlib4/pull/6720\">#6720</a> to make things easier in the medium term.</p>",
        "id": 396533715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697213136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/396459798\">said</a>:</p>\n<blockquote>\n<p>But really my question is \"can I get away with the p=2 special case and a TODO comment in the short term?\".</p>\n</blockquote>\n<p>In the hope the answer is yes, I've created <a href=\"https://github.com/leanprover-community/mathlib4/pull/7661\">#7661</a></p>",
        "id": 396533772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697213161
    },
    {
        "content": "<p>I now realize that what I actually wanted was <code>Pow ℤˣ R</code> for any semiring <code>R</code> where this is well-behaved (though really just ℕ, ℤ, and <code>ZMod 2</code>); I guess I could make do with <code>[Module R (Additive ℤˣ)]</code> and use <code>ofAdd (r • toAdd uz)</code> instead of <code>uz ^ r</code> (where <code>uz : ℤˣ</code>)...</p>",
        "id": 397569279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697745666
    },
    {
        "content": "<p>A new <code>LawfulExponent</code> typeclass (to-additivized to <code>Module</code> if possible) would probably be more principled</p>",
        "id": 397570230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697746068
    },
    {
        "content": "<p>That is, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Typeclass for expoentiation actions by additive monoids. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">LawfulPow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Pow</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">pow_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">pow_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b₂</span>\n  <span class=\"n\">one_pow</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">mul_pow</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">Commute</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span> <span class=\"bp\">^</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 398071933,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698063261
    },
    {
        "content": "<p>Which I think would cover <code>npow</code>, <code>zpow</code>, <code>NNreal.rpow</code>, and the <code>z₂pow</code> above</p>",
        "id": 398072082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698063329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Powers.20of.20.60.E2.84.A4.CB.A3.60.20by.20.60ZMod.202.60/near/397569279\">said</a>:</p>\n<blockquote>\n<p>I guess I could make do with <code>[Module R (Additive ℤˣ)]</code> and use <code>ofAdd (r • toAdd uz)</code> instead of <code>uz ^ r</code> (where <code>uz : ℤˣ</code>)...</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7866\">#7866</a> does exactly this and works well enough here, and is much less work than the new typeclass!</p>",
        "id": 398140219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698087320
    }
]