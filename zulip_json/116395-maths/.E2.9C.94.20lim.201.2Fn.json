[
    {
        "content": "<p>How to fill the <code>sorry</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n\n<span class=\"c1\">-- Definition of limit of a sequence of reals.</span>\n<span class=\"kd\">def</span> <span class=\"n\">seq_lim_infty</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">N</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"bp\">&gt;</span><span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n\n<span class=\"c1\">-- Ex A.3.2</span>\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">seq_lim_infty</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">seq_lim_infty</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">exists_nat_gt</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span><span class=\"o\">],</span>\n<span class=\"o\">{</span>\n\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ε : ℝ,</span>\n<span class=\"cm\">  hε : ε &gt; 0,</span>\n<span class=\"cm\">  N : ℕ,</span>\n<span class=\"cm\">  hN : 1 / ε &lt; ↑N,</span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  hn : n &gt; N,</span>\n<span class=\"cm\">  this : 1 / ε &lt; ↑n</span>\n<span class=\"cm\">  ⊢ 1 / ↑n &lt; ε</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">inv_nonneg</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_nonneg</span><span class=\"o\">],},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344386117,
        "sender_full_name": "Iocta",
        "timestamp": 1679700268
    },
    {
        "content": "<p>something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_lt_iff\">docs#div_lt_iff</a> should make progress on both <code>this</code> and the goal.</p>",
        "id": 344390917,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1679703307
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">seq_lim_infty</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">seq_lim_infty</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">exists_nat_gt</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_zero</span><span class=\"o\">],</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span><span class=\"o\">],</span>\n<span class=\"o\">{</span>\n\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">ε</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">lt_trans</span> <span class=\"n\">hN</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_lt_iff</span><span class=\"o\">],</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">div_lt_iff'</span> <span class=\"n\">hε</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span><span class=\"o\">,},</span>\n  <span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pos_of_gt</span> <span class=\"n\">hn</span><span class=\"o\">,},</span>\n  <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_div</span><span class=\"o\">,</span> <span class=\"n\">inv_nonneg</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_nonneg</span><span class=\"o\">],},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 344391549,
        "sender_full_name": "Iocta",
        "timestamp": 1679703720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as resolved.</p>",
        "id": 344391558,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679703722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as unresolved.</p>",
        "id": 344391622,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679703747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253355\">Iocta</span> has marked this topic as resolved.</p>",
        "id": 344392933,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679704525
    }
]