[
    {
        "content": "<p>Hello,  I have problem with coersion <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">--infix  ` * `     := linear_map.comp</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">linear_map</span>\n<span class=\"n\">def</span>  <span class=\"n\">Projector</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">    if `p² = p` then `(1-p)² = 1 - p - p +p² = ... = 1-p`</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">Complementary</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Projector</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Projector</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Projector</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_sub_left_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">},</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Projector</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ker_eq_im_complementary</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">Projector</span> <span class=\"n\">p</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">range</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">x_in_range</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_range</span> <span class=\"n\">at</span> <span class=\"n\">x_in_range</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">x_in_range</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hyp_y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_ker</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hyp_y</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_apply</span> <span class=\"err\">⇑</span><span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">Projector</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>       <span class=\"c1\">--- here  do you have an idea to make the coersion of the  composition easy ?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195265279,
        "sender_full_name": "orlando",
        "timestamp": 1587784877
    },
    {
        "content": "<p>Could you please copy+paste proof state? BTW, why do you use <code>Projector</code> as a typeclass in <code>Complementary</code> and as an explicit argument in the next lemma?</p>",
        "id": 195268723,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587791424
    },
    {
        "content": "<p>Hello, it's a problem <code> ⇑p ∘ ⇑p = ⇑(p  * p) </code> coersion ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">hyp_y</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n<span class=\"err\">⊢</span> <span class=\"err\">⇑</span><span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">p</span> <span class=\"err\">∘</span> <span class=\"err\">⇑</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">Projector</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 195268824,
        "sender_full_name": "orlando",
        "timestamp": 1587791663
    },
    {
        "content": "<p>You can try to change your goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">change</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 195268827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587791703
    },
    {
        "content": "<p>There should be a <code>linear_map.mul_apply</code> lemma. Use it instead of <code>function.comp_apply</code>.</p>",
        "id": 195268830,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587791709
    },
    {
        "content": "<p>Yury's advice is better</p>",
        "id": 195268835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587791733
    },
    {
        "content": "<p>If there is no such lemma, please add it right after the instance that gives you <code>*</code></p>",
        "id": 195268901,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587791823
    },
    {
        "content": "<p>But it's work Johan ! </p>\n<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  the tatic state change to <code> ⊢ ⇑p y - ⇑(comp p p) y = 0 </code> lean transform <code> * </code> to composition and i can't `rw``` after <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 195268947,
        "sender_full_name": "orlando",
        "timestamp": 1587791899
    },
    {
        "content": "<p>I thinck there is a stuff with using <code> * </code> !</p>",
        "id": 195268948,
        "sender_full_name": "orlando",
        "timestamp": 1587791934
    },
    {
        "content": "<p>It's called <code>linear_map.mul_app</code></p>",
        "id": 195268956,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587791967
    },
    {
        "content": "<p>If you <code>rw ← p.mul_app</code> instead of <code>function.comp_apply</code>, then you should get <code>*</code></p>",
        "id": 195268997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587792006
    },
    {
        "content": "<p>oh Sorry, i read <code>linear_map.comp_apply </code>  so  ok nice !</p>",
        "id": 195269050,
        "sender_full_name": "orlando",
        "timestamp": 1587792152
    },
    {
        "content": "<p>For your question : i don't understand when a have to use <code> class</code> or <code>def</code> or <code>structure</code></p>",
        "id": 195269059,
        "sender_full_name": "orlando",
        "timestamp": 1587792208
    },
    {
        "content": "<p>if i understand, i have to use <code> (hyp :  Projector p) </code></p>",
        "id": 195269159,
        "sender_full_name": "orlando",
        "timestamp": 1587792376
    },
    {
        "content": "<p>You should use <code>class</code> and <code>[Projector p]</code> if you will have quite a few <code>instance</code>s, and every time you apply your theorem Lean will find an instance automatically. It is used, e.g., for various information about <code>Type</code>s (<code>[group α]</code> etc)</p>",
        "id": 195269168,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587792393
    },
    {
        "content": "<p>If you're not going to have many <code>instance</code>s, then you should use <code>(hyp : Projector p)</code>. BTW, if you're going to PR this to <code>mathlib</code>, then I'd recommend to call it <code>is_projector p</code>.</p>",
        "id": 195269212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587792486
    },
    {
        "content": "<p>ok, <code>is_projector</code> is  really a better name !</p>",
        "id": 195269289,
        "sender_full_name": "orlando",
        "timestamp": 1587792637
    }
]