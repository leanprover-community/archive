[
    {
        "content": "<p>I'm working with polynomials and the zero ring is constantly a special case. There is a class <code>nonzero_comm_ring</code> extending comm_ring with the proposition that <code>0 \\ne 1</code>, and several of Chris' results on polynomials need this as a hypothesis (for example the fact that degree of <code>X</code> is 1, and every corollary of this). Of course everything is true (and trivial) for the zero ring, but often the proofs need to be separate because of this. Because of the constructor for <code>nonzero_comm_ring</code> I am coming around to the idea to be splitting on <code>(0 : R) = 1</code> for lemmas which are true in the case R=0 but where the proof in the non-zero case is far from working for the zero ring.</p>\n<p>So I now find myself wanting to prove things such as \"if R is a ring and 0 = 1 then R is a fintype\". I don't really know how to make that an instance, and I am not sure whether it should be an instance. On the other hand if I made a new class <code>zero_ring</code> then in some sense my life would be easier. Having said that, making a class for such a silly edge case seems a bit ridiculous. Should I just stick to proving lemmas rather than making this a class? I am slightly concerned that really I should be working with <code>zero_semiring</code> or something.</p>\n<p>Another issue is that if I put <code>0 = 1 -&gt; fintype R</code> into <code>ring.lean</code> then I have to add an import to <code>ring.lean</code> and I have this vague worry that I don't really know \"which comes first\" out of rings and fintypes.</p>",
        "id": 133613106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536504964
    },
    {
        "content": "<blockquote>\n<p>\"if R is a ring and 0 = 1 then R is a fintype\"</p>\n</blockquote>\n<p>Is this a real example, including the <code>fintype</code> part?</p>",
        "id": 133613814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536505888
    },
    {
        "content": "<p>Your <code>zero_ring</code> could be \"lifted\" all the way up to <code>is_singleton</code>, except we don't have it.</p>",
        "id": 133613889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536505952
    },
    {
        "content": "<p>Rings definitely come before <code>fintype</code>. A more useful instance would perhaps be <code>0 = 1 -&gt; subsingleton R</code></p>",
        "id": 133613892,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536505958
    },
    {
        "content": "<p>You can also use <code>subsingleton</code> in this case, yeah</p>",
        "id": 133613899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536505975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_of_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h01</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">h01</span><span class=\"o\">,</span><span class=\"n\">zero_mul</span><span class=\"o\">]</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">definition</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h01</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">},</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">zero_of_zero_eq_one</span> <span class=\"n\">h01</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_noetherian_of_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h01</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_noetherian_of_fintype</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_zero_eq_one</span> <span class=\"n\">h01</span>\n</pre></div>",
        "id": 133613915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536506015
    },
    {
        "content": "<p>Aha I see. I was wondering how you were using the <code>fintype</code>, but this makes sense.</p>",
        "id": 133613971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536506047
    },
    {
        "content": "<p>I am trying to prove the Hilbert basis theorem for the zero ring :-)</p>",
        "id": 133613973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536506055
    },
    {
        "content": "<p>I've proved that if a module is a fintype then it's Noetherian so I figured I'd use that.</p>",
        "id": 133614007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536506128
    },
    {
        "content": "<p>So you could use case analysis on whether R is a subsingleton, and show that if it isn't then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≠</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\ne 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.716em;\"></span><span class=\"strut bottom\" style=\"height:0.9309999999999999em;vertical-align:-0.215em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">≠</span><span class=\"mord mathrm\">1</span></span></span></span>.<br>\nThen also make an instance that says that if R is a subsingleton then so is R[X].</p>",
        "id": 133614049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536506167
    },
    {
        "content": "<p>Or write a lemma <code>∀ R, subsingleton R ∨ ((0 : R) ≠ 1)</code></p>",
        "id": 133614079,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536506274
    },
    {
        "content": "<p>I see. You're suggesting that I use what we currently have in the type class system by using a different class to convey what I'm trying to say, rather than making a new class. Thanks!</p>",
        "id": 133614109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536506283
    },
    {
        "content": "<p>Well, I would actually prefer that you make a new class but that it should be called <code>is_singleton</code> :)</p>",
        "id": 133614126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536506316
    },
    {
        "content": "<p>Hmm. <code>subsingleton</code> is a Prop. Does this mean that type class inference won't get me from it to <code>fintype</code>?</p>",
        "id": 133614395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536506762
    },
    {
        "content": "<p>Not computably.</p>",
        "id": 133614443,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536506809
    },
    {
        "content": "<p>It will for rings though</p>",
        "id": 133614459,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536506827
    },
    {
        "content": "<p>Proof now looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_noetherian_of_zero_eq_one</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h01</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">subsingleton_of_zero_eq_one</span> <span class=\"n\">h01</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_noetherian_of_fintype</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</pre></div>",
        "id": 133615195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536507705
    },
    {
        "content": "<p>I read that Kevin fights the zero ring. But what's the point of allowing this ring? Why don't we defined a ring with the assumption that 0 and 1 are different? Is it a trick in order to totalize certain constructions? Or is it needed from a categorical point of view (I guess it's a terminal object)?</p>",
        "id": 133793917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536753263
    },
    {
        "content": "<p>I've never thought this through carefully, but I think it is indeed useful from a categorical point of view.</p>",
        "id": 133793951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536753332
    },
    {
        "content": "<p>Funnily enough in my undergraduate ring theory course the lecturer made 0 not= 1 an axiom, and it caused them all sorts of problems. Whenever they formed a quotient ring R / I I would put my hand up and point out that they needed to assume that I was not R (which was not a natural thing to do on many occasions). On the other hand I was only an undergraduate and just assumed that this was an axiom of rings. It was only when I learnt algebraic geometry that I found out that it wasn't. Assuming 0 isn't 1 is a disastrous idea. In a separated scheme, the intersection of two affines is affine -- this sort of thing is used all the time. It would not be true if the empty scheme were not affine.</p>",
        "id": 133794730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536754444
    },
    {
        "content": "<p>The quotient case is one of the examples I had in mind when I wrote \"totalizing construction\". The same probably happens with localization</p>",
        "id": 133794785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536754514
    },
    {
        "content": "<blockquote>\n<p>and i̶t̶  Kevin caused them all sorts of problems</p>\n</blockquote>",
        "id": 133794890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536754643
    },
    {
        "content": "<p>of course, Kevin's behavior there is exactly what lean would do to you if you tried to formalize it</p>",
        "id": 133812772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536772222
    },
    {
        "content": "<p>Where do I find the zero ring? I want to offer it promotion to topological ring. Patrick, did you already do this?</p>\n<p>If it was already there, what was the algorithm I should have used to find it? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- desperation imports</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">gromov_hausdorff</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 170586361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562798972
    },
    {
        "content": "<p>I really want \"import all of mathlib\" here.</p>",
        "id": 170586397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562799002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 170587997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800303
    },
    {
        "content": "<p>I wrote that algorithmically.</p>",
        "id": 170588049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800329
    },
    {
        "content": "<p>I'm about to put a topology on this ring pretty algorithmically as well and then prove it's a topological ring in an equally trivial way. What is the automation that does all this for me?</p>",
        "id": 170588092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800386
    },
    {
        "content": "<p>I thought I remembered it from somewhere. <code>algebra.punit_instances</code></p>",
        "id": 170588686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800975
    },
    {
        "content": "<p><code>topological_ring unit</code> missing?</p>",
        "id": 170588820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562801125
    },
    {
        "content": "<p>My goal is now</p>\n<div class=\"codehilite\"><pre><span></span>⊢ topological_space.lattice.complete_lattice = tmp_complete_lattice\n</pre></div>\n\n\n<p>That's some officially-sanctioned mathlib name is it?</p>\n<p>A little earlier:</p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  @topological_ring unit (@uniform_space.to_topological_space unit unit.uniform_space)\n    (@comm_ring.to_ring unit punit.comm_ring)\nbut is expected to have type\n  @topological_ring unit ⊤ (@comm_ring.to_ring unit punit.comm_ring)\nstate:\nU : topological_space.opens empty\n⊢ topological_ring unit\n</pre></div>",
        "id": 170590649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562803154
    },
    {
        "content": "<p>got it, i'd made a diamond</p>",
        "id": 170590796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562803276
    },
    {
        "content": "<p><code>  valuation := by rintro ⟨⟩,</code> -- thanks <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  ;-)</p>",
        "id": 170590991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562803505
    },
    {
        "content": "<p>I thought the zero ring was added to <code>pi_instances</code></p>",
        "id": 170594504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562808306
    },
    {
        "content": "<p>(which should be renamed btw)</p>",
        "id": 170594507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562808314
    },
    {
        "content": "<p>No it's all in the file <code>punit_instances</code>. But <code>topological_ring</code> is probably missing.</p>",
        "id": 170600845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562819200
    }
]