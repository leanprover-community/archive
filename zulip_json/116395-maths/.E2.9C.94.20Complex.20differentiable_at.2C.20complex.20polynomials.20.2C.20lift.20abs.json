[
    {
        "content": "<p>Hi, <br>\nI have a variety of questions regarding going between real and complex with the coe. <br>\nFirstly, for the reals, the statement <code> |x| ^ 2 = x ^ 2 </code> was no issue and was proved with <code>pow_bit0_abs</code> but  I was not sure how to proceed with<code> ↑|x| ^ 2 = ↑x ^ 2 </code>.<br>\nSome other issues are  proving <code> deriv (λ (y : ℝ), ↑y ^ 2) x = 2 * ↑x </code>, <code>differentiable_at ℝ (λ (y : ℝ), eval ↑y p) x</code> where <code>p: polynomial ℂ</code> and then <code>differentiable_at ℝ (λ (y : ℝ), complex.exp (-(a * ↑y ^ 2))) x</code>.<br>\nI was wondering if there is a simple theorem to mold all these proofs into something library_search and simp can handle again, or rather if these problems require different solutions.<br>\nKind regards, and have a nice evening,<br>\nSonia</p>",
        "id": 341321453,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678646204
    },
    {
        "content": "<p>It would be easier to answer your question if you posted them in a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> form -- i.e. \"can someone help me fill in these explicit sorries in this fully compiling Lean code\". I'll try and work with what we have for now: perhaps <code>norm_cast</code> will help with removing the coercions, and there will probably be explicit lemmas of the form \"if f and g are differentiable then so is lam x, g(f(x))\": note that neither <code>library_search</code> nor <code>simp</code> will find these in your case because the exact statement you want will not be in the library, and <code>simp</code> is a tool for rewriting equalities and iff statements; you want a bespoke tool for <em>apply</em>ing (not rewriting) relevant <code>differentiable_at</code> lemmas and no such tool exists as far as I know.</p>",
        "id": 341321969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678646472
    },
    {
        "content": "<p>Thank you! Norm_cast worked well with my first problem! I will try to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> form!</p>",
        "id": 341323327,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678647157
    },
    {
        "content": "<p>Coincidentally I was in the process of making a problem sheet with this sort of question on it for my class, so creating a mwe myself wasn't hard (although I'll remark that if I hadn't been doing this I wouldn't have bothered and would have waited for you). Here's my effort for e^{-ay^2}:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.parametric_integral</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.comp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.cexp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.neg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.mul</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_const</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.comp</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable.differentiable_at</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n        <span class=\"c1\">-- stuck here</span>\n        <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.pow</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>As you can see, we are a long way from <code>library_search</code> (I needed lots of lemmas, not just one) and we are a long way from <code>simp</code> (I was constantly applying things, not rewriting them). I think that the thing to do here is to make some tool which uses the <code>apply_rules</code> tactic in a bespoke way, like how I imagine the <code>continuity</code> tactic works.</p>\n<p>I've reduced the question to proving that the canonical map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is differentiable, but wouldn't know where to start here as I only just started learning this part of the library.</p>",
        "id": 341323542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678647308
    },
    {
        "content": "<p>PS I am definitely over-importing here; I was actually trying to do stuff about smooth functions.</p>",
        "id": 341323879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678647523
    },
    {
        "content": "<p>If you want to prove that the coercion is differentiable, it looks like one approach is simply to write down what you claim the derivative is, and then prove that you're right by showing that a limit of a bunch of 0s is 0. However thinking about it a bit more my guess is that there should be a lemma somewhere saying that a linear function is differentiable (with derivative the same function at each point); proving that <code>coe</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-linear will be straightforward. The reason I'm hesitant to leap into this is that someone who already knows what's in the library will probably be able to do it in one line, and I need to prepare my class :-)</p>",
        "id": 341324276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678647745
    },
    {
        "content": "<p>Oh, continuous linear maps are definitely differentiable :<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/calculus/cont_diff.html#continuous_linear_map.cont_diff\">https://leanprover-community.github.io/mathlib_docs/analysis/calculus/cont_diff.html#continuous_linear_map.cont_diff</a><br>\n(I haven't found a more clever way. I recently had to write down explicitly the identity function between two equal subspaces of a normed vector space and proved that that thing was differentiable, and I went through the \"it's a continuous linear map\" route...)</p>",
        "id": 341325759,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1678648565
    },
    {
        "content": "<p>Hi again! Sorry I was gone for some time, my wifi stopped working. <br>\nPrevously, <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>   had shown me the first lemma, and so it worked! :D Thank you, this was great!<br>\nAnd good luck with the class!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.parametric_integral</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.differentiable_at_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.of_real_clm.differentiable_at.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.comp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.cexp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.neg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.mul</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_const</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">complex.differentiable_at_coe</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_pow</span> <span class=\"mi\">2</span><span class=\"o\">,},},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 341325835,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678648633
    },
    {
        "content": "<p>Thanks Sophie! And Sonia if you move the top and bottom <code> ``` </code>s onto lines by themselves (you can just edit your message) then your code will be less blue.</p>",
        "id": 341327295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678649437
    },
    {
        "content": "<p>When I was working on the gamma function, I spent so long messing around with complex vs. real differentiability that I added two specific lemmas for dealing with it, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at.comp_of_real\">docs#has_deriv_at.comp_of_real</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at.of_real_comp\">docs#has_deriv_at.of_real_comp</a>.</p>",
        "id": 341328555,
        "sender_full_name": "David Loeffler",
        "timestamp": 1678650159
    },
    {
        "content": "<p>So here's my attempt (building on Kevin's groundwork):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.comp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.cexp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.neg</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.mul</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_const</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.of_real_pow</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.differentiable_at</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at.of_real_comp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">has_deriv_at_pow</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 341329059,
        "sender_full_name": "David Loeffler",
        "timestamp": 1678650424
    },
    {
        "content": "<p>(This would be even shorter if we had <code>differentiable_at.of_real_comp</code> as a companion to <code>has_deriv_at.of_real_comp</code>; since <code>differentiable_at</code> is defined in terms of <code>has_deriv_at</code> there are more lemmas for the latter than the former.)</p>",
        "id": 341329283,
        "sender_full_name": "David Loeffler",
        "timestamp": 1678650545
    },
    {
        "content": "<p>I am totally wrong about <code>simp</code> not working: I just realised that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.parametric_integral</span>\n\n\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span> <span class=\"c1\">-- because there is `real.cos` and `complex.cos`,</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So maybe there is hope in getting <code>simp</code> to work after all? My understanding of what's going on here is poor. <code>squeeze_simp</code> gives <code>simp only [differentiable.mul, differentiable.cos, differentiable.sin, differentiable_id', differentiable.exp],</code>; here <code>differentiable.mul</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">differentiable.mul</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I would not have guessed that this was a good <code>simp</code> lemma (because it's not an <code>=</code> or <code>iff</code>)</p>",
        "id": 341329724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678650755
    },
    {
        "content": "<p>Here's a two-line proof, which is basically just a heavily golfed version of my previous attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.of_real_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">differentiable_at_id'.cexp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">_</span>\n    <span class=\"o\">((</span><span class=\"n\">differentiable_at_const</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">has_deriv_at_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">of_real_comp.differentiable_at</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 341330371,
        "sender_full_name": "David Loeffler",
        "timestamp": 1678651202
    },
    {
        "content": "<p>Great!  <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I managed to prove one of the things I wanted using <br>\n<span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/116395-maths/topic/Complex.20differentiable_at.2C.20complex.20polynomials.20.2C.20lift.20abs/near/341328555\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at.of_real_comp\">docs#has_deriv_at.of_real_comp</a>.</p>\n</blockquote>\n<p>and Kevin's work as well :)<br>\nHere is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp_deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.real_deriv</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.differentiable_at_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.of_real_clm.differentiable_at.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv_exp_neg_complex_mul_sq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">):</span>  <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"o\">),</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">deriv.comp</span><span class=\"o\">,</span> <span class=\"n\">complex.deriv_exp</span><span class=\"o\">,</span><span class=\"n\">deriv_mul</span><span class=\"o\">,</span><span class=\"n\">deriv_const</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">mul_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_inj</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">has_deriv_at.deriv</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">has_deriv_at.of_real_comp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">deriv</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">deriv_pow''</span><span class=\"o\">,</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_bit0</span><span class=\"o\">,</span> <span class=\"n\">algebra_map.coe_one</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">deriv_id''</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">differentiable_at.has_deriv_at</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.pow</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_const</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">complex.differentiable_at_coe</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_pow</span> <span class=\"mi\">2</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">differentiable_at.comp</span><span class=\"o\">,{</span> <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.cexp</span><span class=\"o\">,</span><span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,},{</span><span class=\"n\">apply</span> <span class=\"n\">differentiable_at_id'</span><span class=\"o\">,},},</span>\n  <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">,</span>  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at.mul</span><span class=\"o\">,</span>  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_const</span><span class=\"o\">,</span>  <span class=\"n\">apply</span> <span class=\"n\">complex.differentiable_at_coe</span><span class=\"o\">,</span>  <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_pow</span> <span class=\"mi\">2</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 341332736,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678652925
    },
    {
        "content": "<p>I am now thinking that perhaps <code>simp</code> is supposed to be proving stuff like this (and am a bit confused about how)</p>",
        "id": 341333163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678653220
    },
    {
        "content": "<p>I tend to use <code>lean squeeze_simp</code> quite a lot! But also, I am not sure why it works, but sometimes if I cannot get <code>lean rw xxx</code> to work, then I do <code> lean simp only [xxx]</code> and it works as well:)</p>",
        "id": 341333884,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678653760
    },
    {
        "content": "<p>Hi again,<br>\nI was wondering if you, <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span>, perhaps worked with complex polynomials. <br>\nI have the following sub-proofs that I struggle to resolve.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.real_deriv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex.differentiable_at_coe</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.of_real_clm.differentiable_at.comp</span> <span class=\"n\">_</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">complex_polynomial</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">)):</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.eval</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.derivative.eval</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:=</span> <span class=\"n\">polynomial.deriv</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">polynomial.eval</span> <span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">polynomial.eval</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"c1\">--norm_cast,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span>  <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">deriv_iterative_exp_neg_sq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">ℂ</span> <span class=\"o\">)):</span>  <span class=\"n\">differentiable_at</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">p.eval</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span><span class=\"o\">:=</span> <span class=\"n\">polynomial.differentiable_at</span> <span class=\"n\">p</span><span class=\"o\">,</span>  <span class=\"c1\">-- I guess here I want differentiable_at ℝ (λ (x : ℝ), polynomial.eval x p) ?m_1, but for good reasons I get differentiable_at ℂ (λ (x : ℂ), polynomial.eval x p) ?m_1</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span><span class=\"o\">:=</span> <span class=\"n\">complex.differentiable_at_coe</span><span class=\"o\">,</span>  <span class=\"c1\">-- using this theorem, I would want something of the form  differentiable_at ℝ (λ (y : ℝ), ↑(polynomial.eval y p)) x, but in the next line I try to get this exactly, but immediately, it transform it back to the form (λ (y : ℝ), polynomial.eval ↑y p) x, thus re-writing does not work.</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">polynomial.eval</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">polynomial.eval</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">):</span><span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"c1\">--rw ← h₃,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">real</span>\n</code></pre></div>",
        "id": 341459811,
        "sender_full_name": "rtertr (Sonia)",
        "timestamp": 1678713843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590693\">rtertr (Sonia)</span> has marked this topic as resolved.</p>",
        "id": 341876275,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678818862
    }
]