[
    {
        "content": "<p>Let <code>α</code> be a fintype with four elements. Klein's Vierergruppe is the subgroup of <code>equiv.perm α</code> consisting of the identity and of the 3 double transpositions, those permutations of cycle type (2,2). When I wished to tell that to Lean, I didn't know how to do it in the same way that we do in class, namely “one check!”, so I invented a more complicated proof, see below. Everything is finite, this should be a mere computation that could be automated. <br>\nSo my  challenge here is that somebody fills the following sorry in a simple way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">V4</span>  <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">subgroup.closure</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">V4_carrier</span> <span class=\"o\">(</span><span class=\"n\">hα4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V4</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>My proof followed a different logic. I proved successively that (I change here the proof to <code>sorry</code>, to make the code shorter — see <a href=\"https://github.com/leanprover-community/mathlib/blob/b040b0da501d47615382a16319754c52cf9527b0/acl-sandbox/group_theory/jordan/V4.lean\">https://github.com/leanprover-community/mathlib/blob/b040b0da501d47615382a16319754c52cf9527b0/acl-sandbox/group_theory/jordan/V4.lean</a>) : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_V4_of_order_two_pow</span> <span class=\"o\">(</span><span class=\"n\">hα4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg0</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">g</span> <span class=\"bp\">∣</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{}</span> <span class=\"bp\">∨</span> <span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">A4_sylow_carrier</span> <span class=\"o\">(</span><span class=\"n\">hα4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">S.carrier</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">V4_is_unique_sylow</span> <span class=\"o\">(</span><span class=\"n\">hα4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">sylow</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">V4</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Moreover, the proof that the carrier of Sylow subgroup is what I write (<code>A4_sylow_carrier</code>) requires to know that there are exactly three double transpositions. For this, I formalized the whole computation of the cardinality classes in the symmetric and alternating groups, see <a href=\"https://github.com/leanprover-community/mathlib/blob/b040b0da501d47615382a16319754c52cf9527b0/acl-sandbox/group_theory/jordan/conj_class_count.lean\">https://github.com/leanprover-community/mathlib/blob/b040b0da501d47615382a16319754c52cf9527b0/acl-sandbox/group_theory/jordan/conj_class_count.lean</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Cardinality of a conjugacy class in `equiv.perm α` of a given `cycle_type` -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">equiv.perm.conj_class_card</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">({</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">is_conj</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">})</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span>\n    <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">m.sum</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span>\n      <span class=\"bp\">*</span> <span class=\"n\">m.prod</span>\n      <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">m.dedup.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m.count</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I believe this is of independent interest, but the way I did it was not easy neither. </p>\n<p>At the end, I actually like this whole proof, but as I said above, an immediate computational proof would have been nice too.</p>",
        "id": 328298625,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676569623
    },
    {
        "content": "<p>I assume <code>cycle_type</code> is computable?</p>",
        "id": 328302975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676570818
    },
    {
        "content": "<p>Is membership of <code>subgroup.closure</code> decidable?</p>",
        "id": 328303027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676570835
    },
    {
        "content": "<p>Could you write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">V4</span>  <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328303326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676570938
    },
    {
        "content": "<p>I didn't test this... some decidability instances might be missing. But I feel like this way is slightly closer to \"what we do in class\". Because we don't actually use <code>subgroup.closure</code></p>",
        "id": 328303463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676570993
    },
    {
        "content": "<p>This would definitely be \"what we do in class\", but I get the following error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">as_true</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)},</span>\n       <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">↑</span><span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}}</span> <span class=\"bp\">→</span>\n       <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">↑</span><span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"bp\">↑</span><span class=\"n\">g.cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}})</span>\n</code></pre></div>\n<p>The <code>subgroup.closure</code> was a trick suggested by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> to obtain a subgroup before I even prove that it is the correct one.</p>",
        "id": 328304128,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676571202
    },
    {
        "content": "<p>Yes, it is a good trick. But I'm not sure it meshes well with \"finite computation\".</p>",
        "id": 328304840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571403
    },
    {
        "content": "<p>So the <code>dec_trivial</code> works fine for <code>one_mem</code> and <code>mul_mem</code>?</p>",
        "id": 328304928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571423
    },
    {
        "content": "<p>No it fails as well, with a similar error message.</p>",
        "id": 328305036,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676571459
    },
    {
        "content": "<p>Aah, too bad.</p>",
        "id": 328305060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571466
    },
    {
        "content": "<p>Your suggestion is something I wouldn't even know how to start.</p>",
        "id": 328305202,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676571485
    },
    {
        "content": "<p>Ooh, wait. I just realized that Lean doesn't know that <code>α</code> has 4 elements.</p>",
        "id": 328305448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571555
    },
    {
        "content": "<p>So it has no chance of knowing how finite the computation is.</p>",
        "id": 328305490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571572
    },
    {
        "content": "<p>(I had told it so!)</p>",
        "id": 328305504,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676571575
    },
    {
        "content": "<p>Hmmm, I'm not enough of a computation-guy to know how to make this work smoothly.</p>",
        "id": 328305785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676571649
    },
    {
        "content": "<p>On the other hand, I just tried the following, and it indicates that Lean does not really understand that this <code>V4</code> is finite. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hα4</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hα4</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">V4</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">V4</span> <span class=\"n\">α</span> <span class=\"n\">hα4</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">V4</span> <span class=\"n\">α</span> <span class=\"n\">hα4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.of_finite</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">V4</span> <span class=\"n\">α</span> <span class=\"n\">hα4</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>requiring a <code>noncomputable</code> (and <code>library_search</code>does not find any other way of proving finiteness…)</p>",
        "id": 328307162,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1676572068
    },
    {
        "content": "<p>You can think of dec_trivial as a \"brute force\" tactic. In this context, the brute force would have to realize you have a hypothesis that you only have 4 possible alpha, then try all 4^3 multiplication definitions, keep only the ones that satisfy the axioms of a group, then make sure the set you have satisfies the properties you asserted about it.</p>",
        "id": 328310812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573133
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_fintype\">docs#set_fintype</a>, which should be what you want, but you need the membership predicate to be decidable.</p>",
        "id": 328310823,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676573136
    },
    {
        "content": "<p>Johan's definition won't work with dec_trivial because it can't conjure up elements of an arbitrary alpha type.</p>",
        "id": 328310982,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573175
    },
    {
        "content": "<p>fintype is more than just the assertion that a type is finite, it's a witness carrying all the elements of the type and no more. So even though I can come up with a lem provable finite set {0,1} if RH else {0}, I can't construct the fintype instance for this set computably because I can't prove that my witness enumerated all the possible elements and no more than that.</p>",
        "id": 328311640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> but that doesn't apply in this case right? Because we don't have <code>RH</code> here: everything is decidable.</p>",
        "id": 328312192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676573525
    },
    {
        "content": "<p>fintype (V4 alpha ha4) isn't smart enough to know exactly which of the 4 alpha satisfy V4</p>",
        "id": 328312525,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573636
    },
    {
        "content": "<p>Or, at least, fintype.of_finite isn't by default iiuc</p>",
        "id": 328312683,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573685
    },
    {
        "content": "<p>Hmm, so the fintype instance for <code>alternating_group</code> is not good enough?</p>",
        "id": 328313163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676573845
    },
    {
        "content": "<p>I agree that <code>fintype.of_finite</code> is bad in this context.</p>",
        "id": 328313232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676573868
    },
    {
        "content": "<p>One can try fintype by filtering the finset.univ by \"mem V4\"</p>",
        "id": 328313241,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676573871
    },
    {
        "content": "<p>The mwe for this would be, imo, does there exist a binop on fin 4, such that exists an \"identity\" for that binop</p>",
        "id": 328314039,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676574094
    },
    {
        "content": "<p>Where the proof is \"by brute force\". If we can't do that, then we can't say much about an arbitrary alpha with an arbitrary mul just knowing that alpha is dec_eq</p>",
        "id": 328314212,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676574139
    },
    {
        "content": "<p>Yeah the <code>dec_trivial</code> proof can only work for a concrete type (and instances)</p>",
        "id": 328318292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676575345
    },
    {
        "content": "<p>Here's what I meant about my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.alternating</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.concrete</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- 560 ms</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">i</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- deterministic time out</span>\n</code></pre></div>",
        "id": 328321050,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676576285
    },
    {
        "content": "<p>Restricting it to an <code>(op : fin 4 → fin 4 ≃ fin 4)</code> speeds up the first example to 156 ms, but the second still times out</p>",
        "id": 328321260,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676576370
    },
    {
        "content": "<p>I'm not sure what this has to do with the original question though--<code>alternating_group (fin 4)</code> is a known group and it should be within reason (depending on the details of implementation) to check that the elements of certain cycle types are closed under multiplication</p>",
        "id": 328322954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676576895
    },
    {
        "content": "<p>I meant the mwe to imply something like this for an \"arbitrary\" type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.specific_groups.alternating</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.cycle.concrete</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e4</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">e</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e4.trans</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">e4</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">e4.symm</span><span class=\"o\">,</span> <span class=\"n\">e4.symm</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 328332303,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676580358
    }
]