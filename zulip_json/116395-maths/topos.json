[
    {
        "content": "<p>Dear all, in the growing Cambridge Lean User Group;   <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> , <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> , <span class=\"user-mention\" data-user-id=\"249584\">@Thomas Read</span> and I have started building a topos theory library which we now think might be worth mentioning. </p>\n<p><a href=\"https://github.com/b-mehta/topos\" target=\"_blank\" title=\"https://github.com/b-mehta/topos\">https://github.com/b-mehta/topos</a></p>\n<p>So far the highlights are:  Grothendieck topologies, subobject classifiers, binary products implies finite products, cartesian closed categories and lemmas about pullbacks and the over category. Some of it might already be floating around in mathlib branches or hidden repos, so we ought to coordinate with everyone else to make sure we don't reprove the wheel. Some people who might be interested:   <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> .</p>",
        "id": 190086185,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583770209
    },
    {
        "content": "<p>Oh wow, I was going to start working on a very similar list of things last week but then I got sick instead. Good timing I guess?</p>",
        "id": 190086390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583770292
    },
    {
        "content": "<p>Should <a href=\"https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135\">https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135</a> be called <code>pullback</code>?</p>",
        "id": 190086721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583770444
    },
    {
        "content": "<p>Or maybe <code>comap</code>, if you want to be particularly mathlibby.</p>",
        "id": 190086762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583770455
    },
    {
        "content": "<p>Yeah I wasn't sure what to call it.</p>",
        "id": 190086904,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583770517
    },
    {
        "content": "<p>I'm quite sure that <a href=\"https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean\">https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean</a> are in mathlib already</p>",
        "id": 190086963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583770545
    },
    {
        "content": "<p>Yeah feel free to PR and fling issues at us</p>",
        "id": 190087278,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583770672
    },
    {
        "content": "<p>Ha, I'm really excited about this!</p>",
        "id": 190087290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583770680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/topos/near/190086721\" title=\"#narrow/stream/116395-maths/topic/topos/near/190086721\">said</a>:</p>\n<blockquote>\n<p>Should <a href=\"https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135\">https://github.com/b-mehta/topos/blob/master/src/sieve.lean#L135</a> be called <code>pullback</code>?</p>\n</blockquote>\n<p>Yeah this was my vote too!</p>",
        "id": 190087345,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583770689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/topos/near/190086963\" title=\"#narrow/stream/116395-maths/topic/topos/near/190086963\">said</a>:</p>\n<blockquote>\n<p>I'm quite sure that <a href=\"https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean\">https://github.com/b-mehta/topos/blob/master/src/to_mathlib.lean</a> are in mathlib already</p>\n</blockquote>\n<p>Voila: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L128\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L128\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L128</a></p>",
        "id": 190087833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583770921
    },
    {
        "content": "<p>Ah damn, we do have some similar/duplicated work - <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/shapes/images.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/shapes/images.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/limits/shapes/images.lean</a> vs <a href=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\">https://github.com/b-mehta/topos/blob/master/src/over.lean#L419</a></p>",
        "id": 190088438,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583771231
    },
    {
        "content": "<p>Let's hope that refactoring will be smooth</p>",
        "id": 190089694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583771919
    },
    {
        "content": "<p>Yeah it doesn't seem too bad actually - it seems like my version should just form a nice instance of the new class</p>",
        "id": 190089967,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583772053
    },
    {
        "content": "<p>How many SLOC do you have already in this repo?</p>",
        "id": 190090015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583772078
    },
    {
        "content": "<p>Please consider PRing the parts that you think have become reasonably stable.</p>",
        "id": 190090071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583772105
    },
    {
        "content": "<p>(Assuming S means stable), my guess is that about a third to half of it right now</p>",
        "id": 190090326,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583772221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/topos/near/190090015\" title=\"#narrow/stream/116395-maths/topic/topos/near/190090015\">said</a>:</p>\n<blockquote>\n<p>How many SLOC do you have already in this repo?</p>\n</blockquote>\n<p>~3000 lines</p>",
        "id": 190090516,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583772302
    },
    {
        "content": "<p>SLOC = source lines of code</p>",
        "id": 190090559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583772323
    },
    {
        "content": "<p>3000 lines * (1/3) = 1000. That's already 5 PR's that you have there.</p>",
        "id": 190090690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583772371
    },
    {
        "content": "<p>More like 30</p>",
        "id": 190090775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583772442
    },
    {
        "content": "<p>Oh, 1000 / 5, okay.</p>",
        "id": 190090824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583772479
    },
    {
        "content": "<p>Renamed <code>sieve.yank</code> to <code>sieve.pullback</code>.</p>",
        "id": 190092816,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583773585
    },
    {
        "content": "<p>I'm sure the advice from the perfectoid crew would be: strongly consider starting to make PR's to mathlib right now. Stuff changes. As mathlib changes your code will begin to break, and then it's your problem to fix it. If it's in mathlib then it gets fixed by the person who broke it instead (and it's often much easier for them to fix it because they almost always know exactly how they broke it, and indeed they just fixed the ten other parts of mathlib which broke for the same reason).</p>",
        "id": 190094956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583774787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, this is all great, and I would encourage lots of PRs to mathlib!</p>",
        "id": 190106150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583780998
    },
    {
        "content": "<p>Let me know if you want to discuss coordination, or any advice on what size chunks to split things into.</p>",
        "id": 190106215,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781019
    },
    {
        "content": "<p>I'm curious about your definition of <a href=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\">image</a>, however. Is this not the \"regular coimage\", rather than the image? (They often coincide, so this is more of a naming problem than a content problem.)</p>",
        "id": 190106423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781137
    },
    {
        "content": "<p>The naming scheme, at least on the <a href=\"https://en.wikipedia.org/wiki/Image_%28category_theory%29\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Image_%28category_theory%29\">wikipedia page</a>, is that \"regular image\" is the dual of what you've written, i.e. the equalizer of the pair of maps from Y into the pushout of X mapping via f into two copies of Y.</p>",
        "id": 190106835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781426
    },
    {
        "content": "<p>There's then a theorem someone ought to prove about when <code>image</code> and <code>regular_image</code> coincide.</p>",
        "id": 190106996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781521
    },
    {
        "content": "<p>And separately a theorem about when <code>image</code> and <code>coimage</code> coincide.</p>",
        "id": 190107026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781535
    },
    {
        "content": "<p>And then further the easier formulas you can use in abelian categories, etc.</p>",
        "id": 190107051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583781554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/topos/near/190106423\" title=\"#narrow/stream/116395-maths/topic/topos/near/190106423\">said</a>:</p>\n<blockquote>\n<p>I'm curious about your definition of <a href=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/over.lean#L419\">image</a>, however. Is this not the \"regular coimage\", rather than the image? (They often coincide, so this is more of a naming problem than a content problem.)</p>\n</blockquote>\n<p>The \"image\" as I defined it satisfies the \"general definition\" of image given on wikipedia - proved on lines 535 and below. My goal here was to get to the 'image' as would be useful in a topos (or in my case a locally cartesian closed category with (refl.) coequalizers), so I've used something more like the regular category definition</p>",
        "id": 190108179,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583782202
    },
    {
        "content": "<p>I wonder if we should just simplify matters; throw out mine and just use yours.</p>",
        "id": 190108482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583782341
    },
    {
        "content": "<p>As far as I can tell they should be able to coexist - I've shown that a LCCC with coequalizers <code>has_images</code>. I think the only real change that needs to be made to your code is to change the <code>instance</code> on L195 to a <code>def</code></p>",
        "id": 190108718,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583782486
    },
    {
        "content": "<p>I should also add to Ed's message that contributions from anyone are more than welcome!</p>",
        "id": 190108778,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1583782538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, have you done anything more with your definition of image? I noticed it's disappeared from the spot in your repository it used to be, and I can't find it now.</p>",
        "id": 190602387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201454
    },
    {
        "content": "<p>I moved it to locally_cartesian_closed.lean</p>",
        "id": 190602393,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201471
    },
    {
        "content": "<p>I haven't yet done much more with it</p>",
        "id": 190602394,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201480
    },
    {
        "content": "<p>Looking back at the history, I'm not sure you actually proved everything yet that the coequalizer of pullbuck definition actually satisfies the general universal property.</p>",
        "id": 190602433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201487
    },
    {
        "content": "<p>Am I missing something?</p>",
        "id": 190602435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201493
    },
    {
        "content": "<p>I think you are - I'll find the line number</p>",
        "id": 190602458,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201575
    },
    {
        "content": "<p><a href=\"https://github.com/b-mehta/topos/blob/master/src/locally_cartesian_closed.lean#L287\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/blob/master/src/locally_cartesian_closed.lean#L287\">https://github.com/b-mehta/topos/blob/master/src/locally_cartesian_closed.lean#L287</a></p>",
        "id": 190602514,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201610
    },
    {
        "content": "<p>Specifically I constructed the regular coimage, and proved that in a locally cartesian closed category with coequalizers it coincides with the image</p>",
        "id": 190602524,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201649
    },
    {
        "content": "<p><code>mono_part_is_mono</code> establishes that my image is a <code>mono_factorisation</code>, <code>image_is_smallest_subobject</code> is the definition of <code>is_image.lift</code> and <code>smallest_subobject_factors</code> shows <code>is_image.lift_fac'</code></p>",
        "id": 190602600,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201831
    },
    {
        "content": "<p>Great. It would be nice to separate things out a bit, and identify explicitly at what point you're using the LCC condition.</p>",
        "id": 190602601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201832
    },
    {
        "content": "<p>Can you point me to where that is?</p>",
        "id": 190602644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201855
    },
    {
        "content": "<p>in <code>mono_part_is_mono</code></p>",
        "id": 190602654,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201882
    },
    {
        "content": "<p>In <code>pullback_preserves_epi'</code> and <code>prod_map_epi</code> near the end of that proof</p>",
        "id": 190602667,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584201928
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 190602669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584201935
    },
    {
        "content": "<p>I should say that I wrote all this with the ultimate end-goal of getting to epi-mono factorisation in a topos, so I didn't care too much about what conditions were used where since we'd eventually have them all anyway</p>",
        "id": 190602720,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584202005
    },
    {
        "content": "<p>I think a better way of doing this would be to define a regular category and show that an LCC with refl. coeqs is regular</p>",
        "id": 190602734,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584202061
    },
    {
        "content": "<p>(and regular categories also generalise abelian categories which is I think what your end goal is?)</p>",
        "id": 190602735,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584202080
    },
    {
        "content": "<p>It may be interesting to translate some of the work on boolean valued models by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  to topos theory, and perhaps generalize it to Heyting valued models.</p>",
        "id": 190968434,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584531857
    },
    {
        "content": "<p>E.g following the treatment in Maclane and Moerdijk</p>",
        "id": 190968511,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584531913
    },
    {
        "content": "<p>Yeah, I would like to get most of chapters 4-6 of MM</p>",
        "id": 190979645,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584538370
    },
    {
        "content": "<p>For those interested, we've effectively got the first milestone in this project! Pare's theorem: that a category with finite limits and power objects has finite colimits. Along the way, we've also now got the reflexive (or crude) monadicity theorem and creation of limits (it's sorry-free but still a bit messy, so it's in <a href=\"https://github.com/b-mehta/topos/tree/beck\" title=\"https://github.com/b-mehta/topos/tree/beck\">this branch</a>)</p>",
        "id": 191947313,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585256016
    },
    {
        "content": "<p>PR, PR, PR, before it's too late. :-)</p>",
        "id": 191977852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585286551
    },
    {
        "content": "<p>There's an art to keeping a bolus of development work going, making sure to balance the rates at which material enters and leaves (digested into mathlib).</p>",
        "id": 191977921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585286671
    },
    {
        "content": "<p>Next milestone! We now have the <a href=\"https://ncatlab.org/nlab/show/over-topos\" title=\"https://ncatlab.org/nlab/show/over-topos\">Fundamental Theorem of Topos Theory</a>, that every topos is locally cartesian closed and that every logical functor with a left adjoint has a right adjoint, as well as the <a href=\"https://ncatlab.org/nlab/show/adjoint+lifting+theorem\" title=\"https://ncatlab.org/nlab/show/adjoint+lifting+theorem\">adjoint lifting theorem</a>. This covers almost all of A2.2 of the Elephant (plus stuff from A2.1 and A2.3), about 80% of chapter 4 of MM, and about 95% of the examinable topos theory part of the Part III category theory course (I think this means about 85% of the course is in lean now). Next up: sheaves and sheafification.</p>",
        "id": 195854818,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1588259944
    },
    {
        "content": "<p>Did you tell PTJ?</p>",
        "id": 195862909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588263141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/topos/near/191977852\" title=\"#narrow/stream/116395-maths/topic/topos/near/191977852\">said</a>:</p>\n<blockquote>\n<p>PR, PR, PR, before it's too late. :-)</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 195867465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588265155
    },
    {
        "content": "<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 195867553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588265173
    }
]