[
    {
        "content": "<p>Does <code>really_convex</code> in the sphere eversion project differ from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex#doc\">docs#Convex</a> ?</p>",
        "id": 376468103,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689712455
    },
    {
        "content": "<p>Yes it does. It's what convex should be. There are equivalent in the very special case of a module over a field.</p>",
        "id": 376468469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689712570
    },
    {
        "content": "<p>What is a counterexample?</p>",
        "id": 376494387,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689723328
    },
    {
        "content": "<p>I see: if we want to prove that <code>w1 * x1 + w2 * x2 + w3 * x3 ∈ s</code> from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex#doc\">docs#Convex</a>, then we need division.</p>",
        "id": 376496853,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689724794
    },
    {
        "content": "<p>Should I try to migrate <code>Mathlib</code> to the definition with <code>finsum</code>?</p>",
        "id": 376496964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689724816
    },
    {
        "content": "<p>For anyone else with no context, the code is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/137822135e9ee3a4199725a6184146801112b77b/src/to_mathlib/analysis/convex/basic.lean#L122-L125\">here</a> and is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Generalization of `convex` to semirings. We only add the `s = ∅` clause if `𝕜` is trivial. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">really_convex</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"bp\">∨</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">support</span> <span class=\"n\">w</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 376500054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689726221
    },
    {
        "content": "<p>while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex\">docs3#convex</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_convex\">docs3#star_convex</a> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">star_convex</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">⦄,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"sd\">/-- Convexity of sets. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">convex</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">star_convex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 376500587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689726412
    },
    {
        "content": "<p>Is there a standard name for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex#doc\">docs#Convex</a> ?</p>",
        "id": 376503021,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689727360
    },
    {
        "content": "<p>Note: I only care about convexity in modules over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb R_{\\ge0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> (real vector spaces and measures).</p>",
        "id": 376503678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689727575
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  had a refactor in mind that would make it work for affine spaces, which I think is a useful generalization</p>",
        "id": 376503805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689727633
    },
    {
        "content": "<p>Without loosing semirings?</p>",
        "id": 376503841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689727648
    },
    {
        "content": "<p>I don't know: but I would speculate that more people expect \"convex\" to be meaninful in an affine sense than for semirings</p>",
        "id": 376504010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689727707
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.affineCombination#doc\">docs#Finset.affineCombination</a> indeed needs rings</p>",
        "id": 376504170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689727776
    },
    {
        "content": "<p>AFAIR, the plan was to redefine an affine space as a space with affine combinations instead of an add torsor.</p>",
        "id": 376505423,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689728278
    },
    {
        "content": "<p>Then we can have both.</p>",
        "id": 376505489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689728286
    },
    {
        "content": "<p>But this is a large refactor.</p>",
        "id": 376505506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689728291
    },
    {
        "content": "<p>In the context of the sphere the ring is the ring of real-valued functions (or more precisely germs of real valued functions). This is the relevant ring when using partitions of unity. Convexity of a set with coefficients in this ring ensures that you can create elements of this set using partitions of unity.</p>",
        "id": 376555771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689750897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Should I replace <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Convex#doc\">docs#Convex</a> with <code>ReallyConvex</code> in <code>Mathlib</code>? If yes, then should I save the current definition under some other name?</p>",
        "id": 376649594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689770205
    },
    {
        "content": "<p>I'm not sure mathlib4 is already open to such refactors. And then I don't think the current definition should have another name, there should be a lemma saying that, whenever the scalar ring is a field, the current definition (and its many variants) is sufficient to prove convexity.</p>",
        "id": 376650207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770325
    },
    {
        "content": "<p>I don't think there is any use for the current definition when it is not equivalent to <code>really_convex</code>.</p>",
        "id": 376650333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770349
    },
    {
        "content": "<p>It's not open for refactors yet.</p>",
        "id": 376650966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689770451
    },
    {
        "content": "<p>Soon. :-)</p>",
        "id": 376652798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689770787
    },
    {
        "content": "<p>22 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/porting.20the.20sphere.20eversion.20project\">#maths &gt; porting the sphere eversion project</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 376652908,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689770807
    }
]