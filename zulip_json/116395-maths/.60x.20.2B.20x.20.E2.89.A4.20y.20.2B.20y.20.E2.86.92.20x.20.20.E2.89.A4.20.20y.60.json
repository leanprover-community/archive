[
    {
        "content": "<p>What conditions are needed for <code>x + x ≤ y + y</code> to imply <code>x ≤ y</code> is the topic here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Order</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_nsmul_le_two_nsmul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommGroup</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_of_nsmul_le_nsmul</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"n\">hyp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_nsmul_le_two_nsmul'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">LinearOrderedAddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_of_nsmul_le_nsmul</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span> <span class=\"n\">hyp</span>\n</code></pre></div>\n<p>Why do I need <code>[LinearOrder C]</code> here?<br>\nI would like to work with <code>[OrderedAddCommGroup C]</code> instead of <code>[LinearOrderedAddCommGroup C]</code> if possible.<br>\n<span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> told me about <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Counterexamples/CanonicallyOrderedCommSemiringTwoMul.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Counterexamples/CanonicallyOrderedCommSemiringTwoMul.lean</a> but the requirement for linear ordering is not given reasons for (if I understand it correctly).<br>\nWhat can happen if I have partial ordering only?</p>",
        "id": 397930692,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697967952
    },
    {
        "content": "<p>surely the answer is \"whatever <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=le_of_nsmul_le_nsmul#doc\">docs#le_of_nsmul_le_nsmul</a> says\"?</p>",
        "id": 397931319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697968548
    },
    {
        "content": "<p>I mean, is a similar lemma that drops the linear ordering requirement impossible?</p>",
        "id": 397931378,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697968594
    },
    {
        "content": "<p>When using covariant classes for semirings, normally you deal with multiplication by positive elements.</p>\n<p>Maybe in your context having nsmul by Nats is what you want?</p>",
        "id": 397935131,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697971917
    },
    {
        "content": "<p>Something like (untested)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ContravariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">C</span> <span class=\"n\">NSMul.nsmul</span> <span class=\"n\">LE.le</span>\n</code></pre></div>\n<p>maybe?</p>",
        "id": 397935425,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972172
    },
    {
        "content": "<p>Yes, I use <code>nsmul</code> only.<br>\nI also proved that both </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"n\">CovariantClass</span> <span class=\"n\">C</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">Function.swap</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>follow from <code>[IsLeftCancelAdd C]</code> which I already had in the scope anyways.<br>\nMy question is whether I need the ordering to be linear.</p>",
        "id": 397935426,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1697972172
    },
    {
        "content": "<p>Maybe with what I wrote you can just have a preorder?</p>",
        "id": 397935447,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972209
    },
    {
        "content": "<p>Although I would have to think about whether <code>0 ≤ 0</code> in Nat means that the typeclass above never really applies.  We may need a nonexistent <code>pnatsmul</code> class?</p>",
        "id": 397935549,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972308
    },
    {
        "content": "<p>This indeed works but is vacuous:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.GroupPower.Order</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_nsmul_le_two_nsmul</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ContravariantClass</span> <span class=\"n\">ℕ</span> <span class=\"n\">C</span> <span class=\"n\">HSMul.hSMul</span> <span class=\"n\">LE.le</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">ContravariantClass.elim</span>  <span class=\"n\">ℕ</span> <span class=\"n\">C</span> <span class=\"n\">HSMul.hSMul</span> <span class=\"n\">LE.le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hyp</span>\n</code></pre></div>",
        "id": 397935589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697972358
    },
    {
        "content": "<p>Ok, so I suspect that limiting the Contra assumption to non-zero Nats is a principled way to go, but requires quite a bit of work</p>",
        "id": 397935652,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972407
    },
    {
        "content": "<p>I think the typeclass you want would amount to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PosMulMono#doc\">docs#PosMulMono</a> but for SMul</p>",
        "id": 397935657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697972409
    },
    {
        "content": "<p>Yes, that is what I was also thinking.  But I don't think that this is feasible with the typeclasses that exist currently.</p>",
        "id": 397935700,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972449
    },
    {
        "content": "<p>Unless maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ContravariantClass</span> <span class=\"n\">PNat</span> <span class=\"n\">C</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">LE.le</span>\n</code></pre></div>\n<p>works?</p>",
        "id": 397935842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972546
    },
    {
        "content": "<p>Adding (if needed) a SMul instance for PNat and AddSemigroup?</p>",
        "id": 397935888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972599
    },
    {
        "content": "<p>This would be in line with allowing non-unital semirings, so maybe it is not so wild as a proposal</p>",
        "id": 397935921,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697972633
    },
    {
        "content": "<p>I think we should just duplicate <code>PosMulMono</code> for <code>SMul</code></p>",
        "id": 397936392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697973042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> PosMulMono</p>",
        "id": 397936399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697973052
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Ring/Lemmas.html#PosMulMono.toPosMulReflectLT\">PosMulMono.toPosMulReflectLT</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Ring/Lemmas.html#PosMulReflectLT.toPosMulMono\">PosMulReflectLT.toPosMulMono</a>, and <a href=\"https://loogle.lean-lang.org/?q=PosMulMono\">54 more</a></p>",
        "id": 397936400,
        "sender_full_name": "loogle",
        "timestamp": 1697973053
    },
    {
        "content": "<p>(and those 56 theorems...)</p>",
        "id": 397936424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697973083
    },
    {
        "content": "<p>Maybe they could simply be generalized to lemmas that apply in both cases?</p>",
        "id": 397937013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697973633
    },
    {
        "content": "<p>CovariantClass already allow completely different types, so simply not imposing the condition that the first type is the subtype of the positive elements of the second may already suffice to be able to express the right concept and use the same API?</p>",
        "id": 397937146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697973754
    },
    {
        "content": "<p>We want the whole API anyway because <code>smul</code> does not match syntactically against <code>mul</code></p>",
        "id": 397938449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697975003
    },
    {
        "content": "<p>But indeed we may be able to prove all the <code>mul</code> lemmas in terms of the <code>smul</code> ones</p>",
        "id": 397938457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697975015
    },
    {
        "content": "<p>And what about trying to see if the HMul can be exploited?</p>",
        "id": 397945697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697982059
    },
    {
        "content": "<p>My current view is that:</p>\n<ul>\n<li>having separate symbols for * and • is a feature not a big</li>\n<li>attempting to write fully generalized HMul instances everywhere (for scalar actions) would be a disaster WRT instance diamonds.</li>\n</ul>",
        "id": 397952218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697988264
    },
    {
        "content": "<p>Ok, I'm happy to accept this heuristic!</p>\n<p>So, basically the proposal is to rewrite the file with <code>PosMul</code>s using <code>PosSMul</code>s and then have one-line proofs for the statements where the <code>SMul</code> is <code>mul (↑_) _</code>, right?</p>",
        "id": 397952848,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697988814
    },
    {
        "content": "<p>I don't think any coercion is needed in the proofs</p>",
        "id": 397953084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697989082
    },
    {
        "content": "<p>I'm suggesting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">PosSMulMono</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">CovariantClass</span> <span class=\"n\">α</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.val</span> <span class=\"bp\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397953156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697989155
    },
    {
        "content": "<p>Though clearly I meant the <code>StrictMono</code> version!</p>",
        "id": 397953223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697989228
    },
    {
        "content": "<p>Ah, yes: what I called coercion really was <code>subtype.val</code>!</p>",
        "id": 397963041,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697998490
    },
    {
        "content": "<p>What I meant was that the coercion is in the typeclass definition not the proof!</p>",
        "id": 397963454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697998975
    },
    {
        "content": "<p>Ok, I think that we have been saying the same thing all along, except that my mental picture was very informal, while yours actually typechecked!</p>",
        "id": 397963753,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697999351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/116395-maths/topic/.60x.20.2B.20x.20.E2.89.A4.20y.20.2B.20y.20.E2.86.92.20x.20.20.E2.89.A4.20.20y.60/near/397931378\">said</a>:</p>\n<blockquote>\n<p>I mean, is a similar lemma that drops the linear ordering requirement impossible?</p>\n</blockquote>\n<p>I think it's not possible with reasonable assumptions, as you can take the trivial partial order (<code>a ≤ b ↔ a = b</code>) on any AddCommGroup, then <code>2 • x ≤ 2 • y → x ≤ y</code> is saying that <code>2 •</code> is injective, which certainly isn't the case in every AddCommGroup.</p>",
        "id": 401564582,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699756486
    },
    {
        "content": "<p>Recently, I wanted to have a similar lemma for <code>Finsupp</code>s</p>",
        "id": 401624225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699805367
    },
    {
        "content": "<p>What are the correct typeclass assumptions? What instances do we miss?</p>",
        "id": 401624236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699805393
    },
    {
        "content": "<p>Contravariant multiplication by positive elements is the obvious condition that comes to mind.</p>",
        "id": 401625760,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699807211
    }
]