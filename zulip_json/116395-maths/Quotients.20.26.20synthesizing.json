[
    {
        "content": "<p>Hello, I'm trying to do some quotients stuff, namely to build the completion of a metric space.<br>\nSo here's a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion_of_metric_space</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"c1\">-- instance completion.metric_space: espace_metrique cauchy.setoid</span>\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n\n\n<p>So here's my first attempt, <code>cauchy.setoid</code> fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>So what I have done is to add types everywhere and had this new minimal example, but now I have this \"too many arguments\" issues:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"c1\">-- Une structure d&#39;espace métrique sur un type X --</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test2</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- en termes d&#39;univers, quotient retourne un type d&#39;univers u + 1 en partant de T : Type u.</span>\n<span class=\"n\">def</span> <span class=\"n\">completion_of_metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion_of_metric_space</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">test2</span>\n</code></pre></div>\n\n\n<p>Precisely:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion_of_metric_space</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">raito</span><span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">projet</span><span class=\"bp\">-</span><span class=\"n\">maths</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">espaces</span><span class=\"bp\">-</span><span class=\"n\">metriques</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</code></pre></div>\n\n\n<p>I have found this topic: <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html\" title=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html\">https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html</a> which seems to have this error, but I don't understand how to port the idea to my problem.</p>\n<p>Also, I guess it might have to do with some universes stuff as I'm trying to cheat and let Lean compute the correct universes, but it might be possible that I need to be explicit and specify that a completion lives in Type (u + 1) ?</p>",
        "id": 197057758,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589120303
    },
    {
        "content": "<p>Not at lean right now so treat with a pinch of salt. Lean can't figure out X in the first example. Make it explicit and call it <code>cauchy_seqs X</code></p>",
        "id": 197058198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589120695
    },
    {
        "content": "<p>Oh you got that far</p>",
        "id": 197058271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589120802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197058271\" title=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197058271\">said</a>:</p>\n<blockquote>\n<p>Oh you got that far</p>\n</blockquote>\n<p>Indeed, but that means that I have to do it the 2nd way at least :)</p>",
        "id": 197058280,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589120821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">is_cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">d_pos</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 197058716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121195
    },
    {
        "content": "<p>PS <code>d_pos</code> follows from the other axioms :P (use the triangle equality) and <code>presep</code> should just be <code>forall x, d x x = 0</code></p>",
        "id": 197059056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121496
    },
    {
        "content": "<p>Wow, I don't see very well what's the difference, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 197059061,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121499
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I agree, you've already told me this :D! But I'm not allowed to change those :D)</p>",
        "id": 197059100,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121528
    },
    {
        "content": "<p>I guess you just made some syntax error in the second example -- no <code>:=</code>?</p>",
        "id": 197059171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121583
    },
    {
        "content": "<p>… indeed.</p>",
        "id": 197059243,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121632
    },
    {
        "content": "<p>The error is a bit cryptic though</p>",
        "id": 197059261,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121681
    },
    {
        "content": "<p>There used to be a comment on the official Lean github repo saying something like \"we will close issues complaining that error messages are confusing\"</p>",
        "id": 197059402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121871
    },
    {
        "content": "<p>While I'm on the subject of quotients, is there a way to transfer a map <code>f : (a_1 a_2 … a_n: cauchy_seqs X) → Y</code> into a <code>f' : (a_1 … a_n: completion X) → Y</code>?</p>",
        "id": 197060170,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123063
    },
    {
        "content": "<p><code>quotient.lift</code>?</p>",
        "id": 197060275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123256
    },
    {
        "content": "<p>it sounded like <code>quotient.lift</code> takes a <code>f : α → β</code>,</p>",
        "id": 197060356,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123400
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 197060423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123475
    },
    {
        "content": "<p>Well you can't have <code>…</code>, but I think there is a version for 2 arguments at least and you can look at how that works.</p>",
        "id": 197060432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123497
    }
]