[
    {
        "content": "<p>Hello, I'm trying to do some quotients stuff, namely to build the completion of a metric space.<br>\nSo here's a minimal example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion_of_metric_space</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"c1\">-- instance completion.metric_space: espace_metrique cauchy.setoid</span>\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n\n\n<p>So here's my first attempt, <code>cauchy.setoid</code> fails with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>So what I have done is to add types everywhere and had this new minimal example, but now I have this \"too many arguments\" issues:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"c1\">-- Une structure d&#39;espace métrique sur un type X --</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test2</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">-- en termes d&#39;univers, quotient retourne un type d&#39;univers u + 1 en partant de T : Type u.</span>\n<span class=\"n\">def</span> <span class=\"n\">completion_of_metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion_of_metric_space</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">test2</span>\n</code></pre></div>\n\n\n<p>Precisely:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion_of_metric_space</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">raito</span><span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">projet</span><span class=\"bp\">-</span><span class=\"n\">maths</span><span class=\"bp\">-</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">espaces</span><span class=\"bp\">-</span><span class=\"n\">metriques</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">34</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</code></pre></div>\n\n\n<p>I have found this topic: <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html\" title=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html\">https://leanprover-community.github.io/archive/stream/113488-general/topic/has_coe_to_fun.20with.20implicit.20arguments.html</a> which seems to have this error, but I don't understand how to port the idea to my problem.</p>\n<p>Also, I guess it might have to do with some universes stuff as I'm trying to cheat and let Lean compute the correct universes, but it might be possible that I need to be explicit and specify that a completion lives in Type (u + 1) ?</p>",
        "id": 197057758,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589120303
    },
    {
        "content": "<p>Not at lean right now so treat with a pinch of salt. Lean can't figure out X in the first example. Make it explicit and call it <code>cauchy_seqs X</code></p>",
        "id": 197058198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589120695
    },
    {
        "content": "<p>Oh you got that far</p>",
        "id": 197058271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589120802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197058271\" title=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197058271\">said</a>:</p>\n<blockquote>\n<p>Oh you got that far</p>\n</blockquote>\n<p>Indeed, but that means that I have to do it the 2nd way at least :)</p>",
        "id": 197058280,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589120821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">is_cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">d_pos</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 197058716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121195
    },
    {
        "content": "<p>PS <code>d_pos</code> follows from the other axioms :P (use the triangle equality) and <code>presep</code> should just be <code>forall x, d x x = 0</code></p>",
        "id": 197059056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121496
    },
    {
        "content": "<p>Wow, I don't see very well what's the difference, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 197059061,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121499
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I agree, you've already told me this :D! But I'm not allowed to change those :D)</p>",
        "id": 197059100,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121528
    },
    {
        "content": "<p>I guess you just made some syntax error in the second example -- no <code>:=</code>?</p>",
        "id": 197059171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121583
    },
    {
        "content": "<p>… indeed.</p>",
        "id": 197059243,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121632
    },
    {
        "content": "<p>The error is a bit cryptic though</p>",
        "id": 197059261,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589121681
    },
    {
        "content": "<p>There used to be a comment on the official Lean github repo saying something like \"we will close issues complaining that error messages are confusing\"</p>",
        "id": 197059402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589121871
    },
    {
        "content": "<p>While I'm on the subject of quotients, is there a way to transfer a map <code>f : (a_1 a_2 … a_n: cauchy_seqs X) → Y</code> into a <code>f' : (a_1 … a_n: completion X) → Y</code>?</p>",
        "id": 197060170,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123063
    },
    {
        "content": "<p><code>quotient.lift</code>?</p>",
        "id": 197060275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123256
    },
    {
        "content": "<p>it sounded like <code>quotient.lift</code> takes a <code>f : α → β</code>,</p>",
        "id": 197060356,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123400
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 197060423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123475
    },
    {
        "content": "<p>Well you can't have <code>…</code>, but I think there is a version for 2 arguments at least and you can look at how that works.</p>",
        "id": 197060432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123497
    },
    {
        "content": "<p>I tried lift_2, and it's complaining about synthesizing:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">T</span>\n<span class=\"err\">⊢</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>For full example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">is_cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- Définit la distance entre 2 suites de Cauchy par lim d(x_n, y_n).</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seqs</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- some cauchy limit stuff.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift₂</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">d_pos</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n\n\n<p><code>completion.dist</code> has errors</p>",
        "id": 197060562,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123673
    },
    {
        "content": "<p>Okay, because your <code>completion</code> is not an instance. To be honest, this whole type class design with quotient is pretty dubious.<br>\nIs there a <code>lift\\2'</code> that uses a <code>{}</code> argument for the <code>setoid</code>?</p>",
        "id": 197060653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589123774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197060653\" title=\"#narrow/stream/116395-maths/topic/Quotients.20.26.20synthesizing/near/197060653\">said</a>:</p>\n<blockquote>\n<p>Okay, because your <code>completion</code> is not an instance. To be honest, this whole type class design with quotient is pretty dubious.<br>\nIs there a <code>lift\\2'</code> that uses a <code>{}</code> argument for the <code>setoid</code>?</p>\n</blockquote>\n<p>I can turn it into an instance, but I heard/read here that most of the time quotients need not to be instances, I don't really understand why (but I guess there must be a good reason)</p>",
        "id": 197060698,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123871
    },
    {
        "content": "<p>As far as I see it, in <code>quot.lean</code>, there's no <code>{…}</code></p>",
        "id": 197060794,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123924
    },
    {
        "content": "<p>for setoids.</p>",
        "id": 197060799,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123926
    },
    {
        "content": "<p>There is nothing specific about quotient, the question is: do you want multiple instances on the same type?</p>",
        "id": 197060805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589123928
    },
    {
        "content": "<p>If yes then there will be trouble.</p>",
        "id": 197060823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589123938
    },
    {
        "content": "<p>The link with quotients is that this issue comes up for instance with setoid on Z (you want several quotients of Z)</p>",
        "id": 197060862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589123965
    },
    {
        "content": "<p>Since you defined your own <code>cauchy_seqs</code> type and the <code>setoid</code> only depends on other stuff available through instances, it would be fine (and easiest) to make it an instance in this case.</p>",
        "id": 197060948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589124018
    },
    {
        "content": "<p>I don't think I'm going to have an instance of something else than a metric space for the Cauchy sequences quotient by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi>lim</mi><mo>⁡</mo></mo><mi>n</mi></msub><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\lim_n d(x_n, y_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> AFAIK.</p>",
        "id": 197060952,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589124021
    },
    {
        "content": "<p>Alright, will do :)</p>",
        "id": 197060956,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589124036
    },
    {
        "content": "<p>I think the last time I asked, Mario told me that arbitrary lifting is independent of Lean</p>",
        "id": 197060977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589124085
    },
    {
        "content": "<p>at least the computable one</p>",
        "id": 197060981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589124098
    },
    {
        "content": "<p>but finite lifting should be doable by induction</p>",
        "id": 197060986,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589124107
    },
    {
        "content": "<p>Also, when I have <code>x ~ y</code>, how can I get the underlying property?<br>\nLike I have <code>x ~ y &lt;=&gt; dist x y = 0</code>, how can I derive <code>dist x y = 0</code> in this situation?</p>",
        "id": 197065102,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589128686
    },
    {
        "content": "<p>Is it <code>rfl</code>?</p>",
        "id": 197065169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589128737
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 197065444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589129129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> :P<br>\nI'll provide a MWE</p>",
        "id": 197065541,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589129279
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">class</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">presep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">triangle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">test</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_cauchy</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">cauchy_seqs</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">is_cauchy</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">instance</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">cauchy_seqs</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n<span class=\"n\">def</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seqs</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- some cauchy limit stuff.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">dist_soundness</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">]:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seqs</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">:</span> <span class=\"n\">cauchy_seqs</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x₁</span> <span class=\"bp\">≈</span> <span class=\"n\">y₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x₂</span> <span class=\"bp\">≈</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">T</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">=</span> <span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">T</span> <span class=\"n\">y₁</span> <span class=\"n\">y₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">t</span> <span class=\"n\">Hxz</span> <span class=\"n\">Hyt</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- what to do with Hxz, Hyt? I want cauchy.dist x z = 0 to rewrite them and conclude by refl.</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">completion</span> <span class=\"n\">T</span><span class=\"o\">):</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift₂</span> <span class=\"o\">(</span><span class=\"n\">cauchy</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">dist_soundness</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">completion</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">completion</span><span class=\"bp\">.</span><span class=\"n\">dist</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">d_pos</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- etc</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 197065896,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589129838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Here's a MWE, I'm not sure how to use <code>rfl</code> to be able to rewrite the goal using Hxz, Hyz?</p>",
        "id": 197065906,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589129860
    }
]