[
    {
        "content": "<p>If <code>G</code> acts on <code>X</code>, then it acts on <code>X → Y</code> (or <code>C(X, Y)</code>, or <code>X →₁[μ] E</code>) on the right. I guess, having this action as an instance for unbundled functions will create a diamond somewhere (not sure). Do we have this action for some bundled maps? Do we have a name convention for lemmas about this action?</p>",
        "id": 368103832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687320420
    },
    {
        "content": "<p>Context: I need the action on <code>Lp</code> (and continuity of this action) to prove that shift by an element with dense <code>subgroup.closure</code> is ergodic.</p>",
        "id": 368103957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687320486
    },
    {
        "content": "<p>Of course, I can state the required lemmas in terms of (pending review) <code>Lp.compMeasurePreserving</code> if we don't want this as an instance.</p>",
        "id": 368104084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687320582
    },
    {
        "content": "<p>(or put the instance in a scope)</p>",
        "id": 368104148,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687320606
    },
    {
        "content": "<p>We don't have this family of instances because we've chosen the convention that actions act on the codomain not the domain; and we can't have both without horrible diamonds everywhere</p>",
        "id": 368132995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687331139
    },
    {
        "content": "<p>I agree with Eric that, for <code>f : G → G</code>, we should keep the convention that <code>a • f</code> should still be the function mapping <code>x</code> to <code>a * f x</code>. It's maybe worth introducing a notation for the right action, though. It could be through a type synonym for <code>G</code>, say <code>right_acting G</code> which acts on the right by default. Then <code>a.right • f</code> would be the function mapping <code>x</code> to <code>f (a⁻¹ * x)</code>.</p>",
        "id": 368144759,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687334164
    },
    {
        "content": "<p>The problem is that for compound types, there's actually a tree of choices regarding whether to act on the left or right. The current convention is to turn left at every fork, and we can use <code>mul_opposite.op</code> to turn right at the very last fork. I think we can probably get away with a synonym that means \"turn right at every fork\". All the intermediate choices seem very hard to label sanely, and are therefore best to just use via functions</p>",
        "id": 368150436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335438
    },
    {
        "content": "<p>For an example of what I mean, consider how  <code>G</code> could act on <code> ι → G → α</code>; and then consider how the desired behavior is different if <code>ι = G</code>.</p>",
        "id": 368150776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335524
    },
    {
        "content": "<p>Sorry, Eric, in my mental picture a type synonym can be inserted at any fork to change the way we're turning. Am I misunderstanding?</p>",
        "id": 368150889,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687335555
    },
    {
        "content": "<p>Eg, taking your example, <code>turn_left ι (turn_right G α)</code>.</p>",
        "id": 368151022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687335595
    },
    {
        "content": "<p>I think that approach fails unless we remove the turn_left default</p>",
        "id": 368151265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335656
    },
    {
        "content": "<p>Because otherwise <code>smul (turn_right G) (G → G)</code> can still be resolved via <code>pi.has_scalar</code> and <code>smul (turn_right G) G</code></p>",
        "id": 368151881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335794
    },
    {
        "content": "<p>Which in this analogy is a left turn!</p>",
        "id": 368151950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335812
    },
    {
        "content": "<p>Oh that's not what I had in mind at all. To me, <code>turn_right α β</code> is a type synonym of <code>α → β</code> and your \"turning right\" action is <code>smul G (turn_right G G)</code>.</p>",
        "id": 368152230,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687335869
    },
    {
        "content": "<p>or, to avoid code duplication across types of bundled maps,  <code>turn_right F</code> is a type synonym of <code>F</code> for some <code>fun_like F</code>, in which case the action is <code>smul G (turn_right (G → G))</code> or <code>smul G (turn_right (G →* G))</code></p>",
        "id": 368152475,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687335930
    },
    {
        "content": "<p>If you put the synonym on the right of the • then you lose the ability to talk about compatibility of actions</p>",
        "id": 368152667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687335965
    },
    {
        "content": "<p>And now you have to write <code>of_right (g • to_right f)</code> instead of something simpler like <code>right_act g • f</code></p>",
        "id": 368152877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687336027
    },
    {
        "content": "<p>I don't think that's such a high price to pay</p>",
        "id": 368153103,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687336081
    },
    {
        "content": "<p>Isn't all this a much higher price than <code>my_act g f</code>?</p>",
        "id": 368153263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687336108
    },
    {
        "content": "<p>well, as you said, your <code>my_act</code> doesn't work when having multiple forks.</p>",
        "id": 368153575,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687336184
    },
    {
        "content": "<p>For <code>f' : ι → G → α</code> you can write <code>fun i =&gt; my_act g (f' i)</code></p>",
        "id": 368154082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687336285
    },
    {
        "content": "<p>It's not clear that there's as much value in inheriting actions for the case Yury is asking for as there is for the existing element wise actions</p>",
        "id": 368154606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687336389
    },
    {
        "content": "<p>And if you're not inheriting then you don't really need typeclasses and a regular definition will do</p>",
        "id": 368154718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687336424
    },
    {
        "content": "<p>I wasn't thinking of the most general situation, only of the situation that happens all the times in regular maths.</p>",
        "id": 368158216,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1687337170
    },
    {
        "content": "<p>The specific action I need is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CompleteSpace</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MeasurableSMul</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MulAction</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSMul</span> <span class=\"n\">M</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SMulInvariantMeasure</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">Lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Lp.compMeasurePreserving</span> <span class=\"o\">(</span><span class=\"n\">c.unop</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measurePreserving_smul</span> <span class=\"n\">_</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>I guess, it creates a diamond for additive right actions of real numbers on the usual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L^1(\\mathbb R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> space.</p>",
        "id": 368228527,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687352233
    },
    {
        "content": "<p>What should I do: leave it as a <code>def</code>? Introduce a type synonym <code>DomAct</code>?</p>",
        "id": 368228686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687352272
    },
    {
        "content": "<p>Can you add the rfl lemma above about <code>(mul_opposite.op m • f) x = _</code> for clarity?</p>",
        "id": 368229329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687352404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">coeFn_domAct</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"bp\">=ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">c.unop</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Lp.coeFn_compMeasurePreserving</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 368230388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687352609
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">L^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is a quotient space and coercion is given by <code>Quotient.out</code>, so no <code>rfl</code>...</p>",
        "id": 368230556,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687352644
    },
    {
        "content": "<p>So, should I add <code>@[to_additive] def DomMulAct G := PreOpposite G</code>, duplicate parts of the API, then add some <code>MulAction</code> instances?</p>",
        "id": 368305519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687366724
    },
    {
        "content": "<p>We'll certainly one day want the left action of <code>G</code> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L^2(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> given a right action of <code>G</code> on <code>X</code>, because this is how automorphic representations are defined.</p>",
        "id": 368309192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687367528
    },
    {
        "content": "<p>What's the expected action of <code>x : DomMulAct G</code> on <code>f : (G → G) → G</code>?</p>\n<ul>\n<li><code>(x • f) i = f (fun j =&gt; x.unop • i j)</code></li>\n<li><code>(x • f) i = f (fun j =&gt; i (x.unop • j))</code>?</li>\n</ul>",
        "id": 368317746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687369485
    },
    {
        "content": "<p>It will look for <code>MulAction G (G → G)</code>, find <code>Pi.mulAction</code>, and use it. So, the answer is (1). If you want (2), then you can use <code>DomMulAct (DomMulAct G)</code> (all of this is not tested).</p>",
        "id": 368322900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687370690
    },
    {
        "content": "<p>Note that the second option is a left action while <code>DomMulAct G</code> is <code>MulOpposite G</code>, so an action of <code>DomMulAct G</code> is a right action.</p>",
        "id": 368323045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687370730
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5368\">#5368</a></p>",
        "id": 368443541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687417624
    },
    {
        "content": "<p>BTW, I'm going to leave some <code>good-first-project</code> gaps in the <code>DomMulAct</code> API (example: action on <code>C(X, Y)</code>; a function is invariant iff it is constant on the orbits), so if someone has an undergraduate who learns Lean 4 and needs exercised that can be turned into PRs, then please contact me.</p>",
        "id": 368636244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687453266
    }
]