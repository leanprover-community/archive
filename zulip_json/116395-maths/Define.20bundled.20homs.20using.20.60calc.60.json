[
    {
        "content": "<p>If <code>monoid_hom.comp</code> was using another order of arguments, it would be possible to write something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">f</span>\n<span class=\"bp\">...</span> <span class=\"bp\">→*</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n\n<p>Can I make <code>monoid_hom.comp</code> usable for <code>calc</code> without changing order of arguments?</p>",
        "id": 196267636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654227
    },
    {
        "content": "<p>Right now I want to define a <code>linear_map</code> as a long composition of <code>linear_map</code>s and <code>linear_equiv</code>s, and <code>calc</code> would make the definition much more readable.</p>",
        "id": 196267657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654300
    },
    {
        "content": "<p>Maybe we need to introduce <code>cocalc</code> that will swap the order of the arguments....</p>",
        "id": 196267711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588654359
    },
    {
        "content": "<p>Or wait till those who chose the order of arguments in <code>category_struct.comp</code> will come and tell us to use it everywhere ;-)</p>",
        "id": 196267928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588654725
    }
]